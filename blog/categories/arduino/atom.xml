<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Categories: Arduino | 折腾来折腾去]]></title>
  <link href="http://pikipity.github.io/blog/categories/arduino/atom.xml" rel="self"/>
  <link href="http://pikipity.github.io/"/>
  <updated>2016-02-15T21:04:31+08:00</updated>
  <id>http://pikipity.github.io/</id>
  <author>
    <name><![CDATA[pikipity]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[自动家庭电源控制系统半成品放出]]></title>
    <link href="http://pikipity.github.io/blog/auto-home-control.html"/>
    <updated>2014-02-17T20:20:00+08:00</updated>
    <id>http://pikipity.github.io/blog/auto-home-control</id>
    <content type="html"><![CDATA[<p>自动家庭电源控制系统基本完成，各个模块基本实现了预期功能，各个模块直接的衔接工作也基本完成，其实年前就已经赶工完成了，本来想趁着过年在家再继续完善一下，但是又犯懒了，什么也没做。</p>

<p>本来预期为了节省成本，想使用 8051 作为控制核心，结果发现控制什么的太麻烦了，尤其是无线模块部分，而且和电脑跨平台连接也相当的复杂，最后还是选择使用了 Arduino，开发难度瞬间降低。我又将其和 <a href="http://pikipity.github.io/blog/little-mr.html">Little Mr.</a> 结合了一下，使其更加有趣。</p>

<p>更加具体的项目介绍在<a href="http://pikipity.github.io/Home-Control/">这里</a>，整个项目的内容在<a href="https://github.com/pikipity/Home-Control.git">这里下载</a>，这还有三段 demo 是视频：</p>

<ol>
<li><p>电脑控制软件的使用方法（8051 为控制核心）</p>

<p><iframe height="498" width="510" src="http://player.youku.com/embed/XNjY2NzcwMzcy" frameborder="0" allowfullscreen></iframe></p></li>
<li><p>如何使用 little Mr. 进行控制（8051 为控制核心）</p>

<p><iframe height="498" width="510" src="http://player.youku.com/embed/XNjY2NzcwNzIw" frameborder="0" allowfullscreen></iframe></p></li>
<li><p>Little Mr. 与 Arduino 结合（Arduino 为控制核心）</p>

<p><iframe height="498" width="510" src="http://player.youku.com/embed/XNjY2NzcxMjY0" frameborder="0" allowfullscreen></iframe></p></li>
</ol>


<p>这个项目到这里就算是完结了吧，德国 Parce 公司已经有成品放出，正在 indiegogo 上筹资，和我设想的产品从外貌到功能如出一辙，大家可以到<a href="http://www.indiegogo.com/projects/the-parce-idea">这里围观一下</a>，虽然其强调的是省电功能，但是一样具有学习功能，从介绍上看，这种学习功能是使用 Wi-Fi 进行联网之后的一个云端服务。（这种东西果然只靠个人是难以完成的啊。。。╮(╯▽╰)╭）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自制 Keynote IR Remote Control]]></title>
    <link href="http://pikipity.github.io/blog/diy-apple-remote-controller.html"/>
    <updated>2013-11-28T18:47:00+08:00</updated>
    <id>http://pikipity.github.io/blog/diy-apple-remote-controller</id>
    <content type="html"><![CDATA[<p><img src="https://lh6.googleusercontent.com/-02eVPhz8fdE/UpcgK1x33qI/AAAAAAAABY0/SDuT9V15AK0/s400/MC377.jpeg" alt="Apple IR Remote Control" /></p>

<p>上图就是 Apple IR Remote Control，利用红外线对 iPod, Apple TV 等苹果设备进行视频播放和音乐播放等控制。对于 Macbook，可以控制 iTunes 的音乐视频播放和 Keynote 的幻灯片演示。官网价钱是港币 148 一个，如果它是蓝牙控制，这个价钱也就没什么了，但是为了一个红外线控制器，这个价钱就不是太值了。但是在使用我的 Macbook Pro 上的 Keynote 做演讲的时候，每次切换幻灯片都要跑到键盘前操作还是太麻烦了，学校网络的问题，iPhone 上的 Keynote Remote 应用不能保证百分之百的和电脑连接上，于是准备自己做一个。</p>

<p>因为手头有一个 Arduino，除了平时根据自己喜好做点小东西以外，放着也没什么大用处，所以准备用它来制作这个红外线遥控器。但是制作过程中遇到问题，由于自己买的红色 LED 灯质量不行，发射的信号始终无法被 Macbook 的红外线探测器检查到，于是放弃。</p>

<p>既然遥控器不容易做，那就使用现成的遥控器，用 Arduino 做一个红外线接收器好了。于是就有了这个项目。使用 下图的红外线遥控器（在<a href="http://item.taobao.com/item.htm?spm=a1z10.3.w17-8299872990.33.35xCfn&amp;id=17278512079&amp;">“淘宝”</a>上买的，5 块钱一个）进行控制。Arduino 作为接收器，接收红外线信号，并解码，将解码结果通过 USB 传送给电脑，电脑上的客户端再根据解码结果，模拟电脑按键来实现对 Keynote 的控制。</p>

<p><img src="https://lh3.googleusercontent.com/-FpgQqEiGrEg/UpcIy8HMWSI/AAAAAAAABYU/Zvznasr8fTM/s640/%25E7%2585%25A7%25E7%2589%2587%252013-11-28%2520%25E4%25B8%258B%25E5%258D%25884%252042%252056.jpg" alt="5 块钱一个的红外线遥控器" /></p>

<p>电路图在下面，超级简单，我使用的是 VS1838B 作为红外线传感器（一样是在<a href="http://item.taobao.com/item.htm?spm=a1z10.3.w17-8299872990.9.VOESMp&amp;id=14835734724&amp;">“淘宝”</a>买的，2 块钱一个）。</p>

<p><img src="https://lh6.googleusercontent.com/-yB0nK0QzIyk/UpcpKN_er6I/AAAAAAAABZE/xTzkLpMezio/s640/apple_controller_bb.png" alt="电路图" /></p>

<p>客户端我使用 Processing 编写，Arduino 和 Processing 的程序可以到<a href="https://github.com/pikipity/apple_controller.git">我的 Github </a>下载。下面是遥控器与键盘实际按键的对应关系：</p>

<table>
<thead>
<tr>
<th style="text-align:center;">遥控器按键</th>
<th style="text-align:center;">键盘按键</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;">后推|&lt;&lt;</td>
<td style="text-align:center;">方向键上</td>
</tr>
<tr>
<td style="text-align:center;">前进>>|</td>
<td style="text-align:center;">方向键下</td>
</tr>
<tr>
<td style="text-align:center;">音量 +</td>
<td style="text-align:center;">方向键右</td>
</tr>
<tr>
<td style="text-align:center;">音量 -</td>
<td style="text-align:center;">方向键左</td>
</tr>
<tr>
<td style="text-align:center;">关闭键</td>
<td style="text-align:center;">开启和关闭选择幻灯片</td>
</tr>
<tr>
<td style="text-align:center;">数字键 0~9</td>
<td style="text-align:center;">数字键 0~9</td>
</tr>
</tbody>
</table>


<p>实际焊接电路的时候，使用了两个 VS1838B，保证信号接收的覆盖范围。现在唯一的问题就是，控制距离很近，这毕竟受到那个遥控器的限制，没有办法。</p>

<p><img src="https://lh5.googleusercontent.com/-03mn3hE1oG0/UpcIywneYJI/AAAAAAAABYY/sz1hunZUDr8/s640/%25E7%2585%25A7%25E7%2589%2587%252013-11-28%2520%25E4%25B8%258B%25E5%258D%25884%252042%252015.jpg" alt="实际电路正面" /></p>

<p><img src="https://lh3.googleusercontent.com/-RWONifCIKj0/UpcIz7nYDOI/AAAAAAAABYg/KgFqGnWKyYc/s640/%25E7%2585%25A7%25E7%2589%2587%252013-11-28%2520%25E4%25B8%258B%25E5%258D%25884%252044%252019.jpg" alt="实际电路背面" /></p>

<p><img src="https://lh6.googleusercontent.com/-KPxIQL4uRjg/UpcIy3xTkvI/AAAAAAAABYc/ihL8Wa_p1uo/s640/%25E7%2585%25A7%25E7%2589%2587%252013-11-28%2520%25E4%25B8%258B%25E5%258D%25884%252043%252040.jpg" alt="电路和 Arduino 连接以后" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[俄罗斯方块（Arduino）]]></title>
    <link href="http://pikipity.github.io/blog/melrose-box-arduino.html"/>
    <updated>2013-09-29T13:34:00+08:00</updated>
    <id>http://pikipity.github.io/blog/melrose-box-arduino</id>
    <content type="html"><![CDATA[<p>经过一个星期闲着无聊地编写和调试，终于可以用 Arduino 玩俄罗斯方块了。四个按钮分别控制左、右、加速下落、转动。使用 LCD12864（QC12864B） 来显示游戏画面。为了寻找可以用来控制 QC12864B 的 Arduino 库花了很长时间，最终选择了 <a href="https://code.google.com/p/u8glib/">u8glib</a>，因为这个库支持的 LCD 控制器非常丰富。<a href="https://code.google.com/p/u8glib/">u8glib 库可以在这里下载</a>，<a href="http://pan.baidu.com/s/1qrhEF">关于 QC12864B 以及如何使用 u8glib 来控制 QC12864B 的资料可以在这里下载</a>，资料中包含一个从网上找来的使用 Arduino 做示波器的例子，使用的就是 <a href="https://code.google.com/p/u8glib/">u8glib</a> 库。</p>

<p>我制作的这个<a href="http://pikipity.github.io/Melrose_box">俄罗斯方块游戏机的项目主页在这里</a>。</p>

<p>面包板连接图：</p>

<p><img src="https://lh3.googleusercontent.com/-MMKU4QZefc4/UkepsoONq0I/AAAAAAAABNI/wASf1AFsVVE/s512/Melrose_box_Scheme_bb.png" alt="面包板连接图" /></p>

<p>运行效果：</p>

<p><img src="https://lh6.googleusercontent.com/-uDiZRNthjjI/Uketz4ePskI/AAAAAAAABNk/zKLtFjShG7U/s640/begin.jpg" alt="运行效果1" /></p>

<p><img src="https://lh5.googleusercontent.com/-PdvRIs9ik6g/UketzzLefkI/AAAAAAAABNc/_8sDPpLxf18/s640/playing.jpg" alt="运行效果2" /></p>

<p><img src="https://lh5.googleusercontent.com/-nyWIb1rcJgc/UketznUnOoI/AAAAAAAABNg/9YnAebKKDXY/s640/finish.jpg" alt="运行效果3" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[利用 Arduino 进行超声波测距]]></title>
    <link href="http://pikipity.github.io/blog/ultrasonic-distance-measurement-using-arduino.html"/>
    <updated>2013-09-21T10:32:00+08:00</updated>
    <id>http://pikipity.github.io/blog/ultrasonic-distance-measurement-using-arduino</id>
    <content type="html"><![CDATA[<p>在<a href="http://pikipity.github.io/blog/arduino-dht11-lcd1602.html">昨天测量温度的装置</a>上又加上了 HC-SR04 来进行超声波测距，先利用 DHT11 测量温度，然后利用温度来计算出较为准确的声速（根据<a href="http://en.wikipedia.org/wiki/Relativistic_Euler_equations">相对论的欧拉方程</a>，声速（米每秒）=331+0.6*温度（摄氏度）），再利用 HC-SR04 测得的超声波来回的时间计算出距离，并在 LCD1602 上显示。</p>

<p>HC-SR04 的使用非常简单，<a href="http://www.doc88.com/p-737494835063.html">这里有一份 HC-SR04 的中文手册</a>，首先向 Trig 引脚输入一个不小于10us的高电平，然后测量 Echo 引脚返回的高电平的时间 t，然后利用公式：距离=t*声速/2，就可以计算得到距离了。但是需要注意：</p>

<ol>
<li>测量周期要在60ms以上，防止回声影响。</li>
<li>计算距离时单位要统一，利用<code>pulseIn()</code>函数返回的时间单位是“微秒”，测量结果单位一般是“厘米”，所以声速要从“米每秒”换算为“厘米每微秒”，也就是除以10000。</li>
<li>测量距离为2cm~400cm，太近的话会有盲区，太远的话由于返回信号太弱难以检测。</li>
</ol>


<p><a href="https://github.com/pikipity/Ultrasonic_distance_measurement_using_Arduino.git">程序可以到这里下载</a>，其中 “HC_SR04_Arduino” 文件夹中是一个 HC-SR04 的 Arduino 测试程序，“display_LCD1602” 文件夹中是这次的程序，"scheme" 文件夹中是电路图。</p>

<p>程序中使用 &ldquo;Time&rdquo; 库来实现定时器中断的功能，<a href="http://srmonk.blogspot.com/2012/01/arduino-timer-library.html">&ldquo;Time&rdquo; 库可以在这里下载</a>，如果你觉得看英文比较烦得话，可以看<a href="http://yehnan.blogspot.com/2012/03/arduino.html">这里这个中文简易教程</a>。</p>

<p>电路图：</p>

<p><img src="https://lh5.googleusercontent.com/-2ggKDjtrfuY/Uj0D_AibosI/AAAAAAAABMw/4VVXk4M1NiY/s640/Breadboard_bb.png" alt="面包板连接图" /></p>

<p><img src="https://lh3.googleusercontent.com/-P3TPBqNYi1E/Uj0D_AqZCmI/AAAAAAAABMs/KXupBqQvZj8/s576/Breadboard_schem.png" alt="电路图" /></p>

<p>结果（LCD 上，第一行为湿度和温度，第二行为距离）：</p>

<p><img src="https://lh5.googleusercontent.com/-lM53a5xTLsA/Uj0D_fkuoxI/AAAAAAAABM0/eefNICQs9Ys/s512/result.jpg" alt="结果" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用 Arduino 测量温度和湿度]]></title>
    <link href="http://pikipity.github.io/blog/arduino-dht11-lcd1602.html"/>
    <updated>2013-09-20T22:00:00+08:00</updated>
    <id>http://pikipity.github.io/blog/arduino-dht11-lcd1602</id>
    <content type="html"><![CDATA[<p>今天中秋放假闲在宿舍里，于是就用 Arduino 做了一个测量温度和湿度的小装置，使用 DHT11 测量温度和湿度，然后用 LCD1602 来显示。</p>

<p><a href="http://wenku.baidu.com/view/bb12c7c7d5bbfd0a795673dd.html">这里有一个 DHT11 的简单介绍</a>，包括引脚的意义和解法还有一个 Arduino 的例程。DHT11 的使用还是很简单的，基本思路就是先发送给 DHT11 一个信号，将其激活，成功激活后，DHT11 会返回一个信号，之后 DHT11 就会连续发送40位的二进制数据，这40bits的数据包括湿度数值、温度数值和校检数值，其中湿度数值和温度数值都是16位的定点二进制小数（<a href="http://pikipity.github.io/blog/scm-principle-3.html">定点二进制小数在这里有介绍</a>），其中前8位为整数位，后8位为小数位，具体排列如下：</p>

<pre><code>8位湿度整数位 8位湿度小数位 8位温度整数位 8位温度小数位 8位校检数值
</code></pre>

<p>DHT11 具体操作步骤如下：</p>

<ol>
<li>发送启动信号：拉低引脚至少18ms，拉高引脚20us到40us</li>
<li>检测 DHT11 的返回信号：如果可以检测到一个低信号80us，然后一个高信号80us，则启动成功，进入下一步开始接受数据，否则启动失败。</li>
<li>开始接受数据：低信号时等待下一位数据，高信号时计算高信号的宽度，如果是26us到28us，则此位为“0”，如果是70us，则此位为“1”，共40位。</li>
</ol>


<p>使用 DHT11 要注意的是：</p>

<ol>
<li>湿度单位为“%RH”（<a href="http://zh.wikipedia.org/wiki/%E7%9B%B8%E5%B0%8D%E6%BF%95%E5%BA%A6">相对湿度</a>），温度单位为“℃”（摄氏度）。</li>
<li>它的精度并不高，湿度误差为±5%RH，温度为±2℃。</li>
<li>校检数值使用方法：如果湿度整数位加上温度整数位等于校检数值，那么传输无误，否则存在传输错误。</li>
<li>采样周期不得小于1秒钟</li>
</ol>


<p>LCD1602 就简单很多了，直接使用 Arduino 自带的 “LiquidCrystal” 库就可以很轻松的进行控制了，库中所包含的函数、使用方法和例程可以到<a href="http://arduino.cc/en/Reference/LiquidCrystal">这里看 “LiquidCrystal” 官方说明文档</a>。</p>

<p>以下是我设计的电路：</p>

<p><img src="https://lh6.googleusercontent.com/-lWe2CscmyLw/Ujv5p3ZbUgI/AAAAAAAABMM/0Dv91ak3_9o/s640/Breadboard_bb.png" alt="面包板连接图" /></p>

<p><img src="https://lh6.googleusercontent.com/-aX-NkrUuHvI/Ujv5piz0TnI/AAAAAAAABMQ/bdtvWYZfm1A/s720/Breadboard_schem.png" alt="电路连接图" /></p>

<p><a href="https://github.com/pikipity/Display_Temp_and_Humi_using_LCD1602.git">程序可以到这里下载</a>。其中 “DHT11_Arduino” 文件夹中是对 DHT11 的测试，用的是串口显示测量结果，“LCD_Arduino” 文件夹中是对 LCD1602 的测试，显示的 &ldquo;hello World"，“display”  文件夹中是整个的代码，"Sketch&rdquo; 中是电路图和结果图。</p>

<p>最终结果如下：</p>

<p><img src="https://lh5.googleusercontent.com/-z0G7fuWmDjs/Ujv5pwiav-I/AAAAAAAABMU/OTBrKNvVwxU/s640/result.jpg" alt="结果" /></p>
]]></content>
  </entry>
  
</feed>
