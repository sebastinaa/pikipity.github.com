<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Categories: Assembly | 折腾来折腾去]]></title>
  <link href="http://pikipity.github.io/blog/categories/assembly/atom.xml" rel="self"/>
  <link href="http://pikipity.github.io/"/>
  <updated>2016-02-15T21:04:31+08:00</updated>
  <id>http://pikipity.github.io/</id>
  <author>
    <name><![CDATA[pikipity]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[第六章 计时器/计数器]]></title>
    <link href="http://pikipity.github.io/blog/scm-priciple-6.html"/>
    <updated>2013-04-04T09:29:00+08:00</updated>
    <id>http://pikipity.github.io/blog/scm-priciple-6</id>
    <content type="html"><![CDATA[<p>计时器与计数器使用的寄存器和它们的工作原理是一样的，当计时时脉从“0”变为“1”的时候，内部的累加器加一，当累加器溢出的时候，检查中断，如果中断置能，便进入中断，否则重新开始计数。它们唯一的不同就是使用的计时时脉不一样，计时器使用的是内部时脉，因为内部时脉很稳定，所以可以用来计算时间；计数器使用的是从 T1 或者 T0 口输入的外部时脉，如果这个外部时脉的信号代表一个事件发生的次数，那么计时/计数器就是在计算这个事件发生的次数。8051中有两个计时/计数器&ndash; Timer0 和 Timer1。</p>

<h2>控制寄存器</h2>

<p>计时/计数器由两个寄存器来控制，它们分别为 TCON 和 TMOD。Timer0 和 Timer1 各有16位用来存放累加数目的寄存器（根据使用的模式不一样，这16位的功能不一样，不一定全部用来计数）。存放 Timer0 累加数目的寄存器是 TH0（高八位）和 TL0（低八位）；存放 Timer1 累加数目的寄存器是 TH1（高八位）和 TL1（低八位）。</p>

<h3>TCON</h3>

<p>TCON 允许位元寻址。每一位代表的意思如下：</p>

<pre><code>TF1  TR1  TF0  TR0  IE1  IT1  IE0  IT0
</code></pre>

<ul>
<li>TF1 和 TF0: Timer1/Timer0 的溢出旗标。当用来存放累加数目的寄存器（也就是 THx 和 TLx）溢出的时候硬件自动置一，当进入对应中断向量的时候硬件自动清零。</li>
<li>TR1 和 TR0：Timer1/Timer0 的运行控制位。置一则开启 Timer1/Timer0，Timer1/Timer0 便开始计时或者计数；清零则关闭 Timer1/Timer0，Timer1/Timer0 停止计时或者计数（其实还会受到 TMOD 中 GATE 位的影响，在设置的时候需要注意）。</li>
<li>IE1 和 IE0: 外部中断 INT1/INT0 边缘触发旗标。当检测到外部中断信号源边缘的时候，硬件自动置一，进入 INT1/INT0 所对应的的中断服务时，硬件自动清零</li>
<li>IT1 和 IT0：INT1/INT0 触发方式控制位。当置一的时候，外部中断源处于下降沿的时候触发对应的外部中断服务；清零的时候，外部中断源处于低电平（也就是“0”）的时候触发对应的外部中断服务（如果一直处于低电平，就会不停的触发中断服务，使用 INT1/INT0 的时候需要注意）。</li>
</ul>


<p>由于 IEx 和 ITx 是用来控制外部中断 INTx 的，这一部分先不管它们，以后再介绍。TFx 会在进入中断之后硬件自动清零，所以当我们使用计时/计数器的中断服务的时候一般不用管这一位。所以对于计时/计数器，一般真正使用的只有 TRx 位，用来启动和停用 计时/计数器。</p>

<h3>TMOD</h3>

<p>TMOD 不可以位元寻址。TMOD是用来选择8051的计时/计数器工作模式的。在8051中，计时/计数器有四种模式，区别主要是集中在 THx 和 TLx 的16位如何使用的问题上，这四种模式分别为：</p>

<p>|&mdash;+&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-|
|M1 |M0 |计时/计数器模式      |
|:-:|:-:|:&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;:|
|0  |0  |13位计时器          |
|0  |1  |16位计时/计数器      |
|1  |0  |8位自动重载计时/计数器|
|1  |1  |两个8位计时/计数器    |
|&mdash;+&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-|</p>

<ul>
<li>13位计时器：一般很少用到，现在的部分8051系列已经去掉了这个功能。使用 THx 的8位和TLx 的第5位组成的13位来存放累加的数字。</li>
<li>16位计时/计数器：非常常用，用 THx 和 TLx 的整个16位来存放累加数字。可以存放的数字很大，但是每次进入中断之后都需要软件重新载入下次计时/计数的初始值。</li>
<li>8位自动重载计时/计数器：TLx 用来存放累加的数字，当 TLx 溢出之后，会自动将 THx 中的数字加载到 TLx 中，作为下次计时/计数的初始值。虽然可以存放的数字不大，但是不用每次进入中断之后用软件重新载入，方便，且速度更快。</li>
<li>两个8位计时/计数器：一般很少用到，现在的部分8051系列已经去掉了这个功能。在这个功能下，Timer1 不能使用，所有跟 Timer1 有关的控制位都转而控制 TH0，TL0则继续由 Timer0 的控制位控制。及其没有用处，因为得到的效果还不如用 Timer0 和 Timer1 分别设置为两个8位自动重载计时/计数器。</li>
</ul>


<p>TMOD 每一位对应的意思如下（前四位对应 Timer1，后四位对应 Timer0）：</p>

<pre><code>GATE  C/T  M1  M0  GATE  C/T  M1  M0
</code></pre>

<ul>
<li>GATE：选择开启方式是硬件控制还是软件控制。当置一的时候，开启方式是硬件控制，当 TCON 中 TRx 置一且 INTx 为高的时候，对应的计时/计数器才开始计时/计数，否则不开启；当清零的时候，开启方式为软件控制，TRx 置一就可以开启。</li>
<li>C/T：计时器和计数器选择位。置一则为计数器，清零则为计时器。</li>
<li>M1 和 M0：计时/计数器模式选择位，对应的模式见上表。</li>
</ul>


<h2>设置思路</h2>

<p>在使用计时/计数器的时候要先对其进行设置，例如选择哪个计时/计数器，什么模式，初值为何，都要预先设置，但由于涉及的寄存器有四个，所以考虑的时候有些复杂，下面介绍的是设置的基本思路。</p>

<p>首先，你要明确以下几个问题，然后再开始设置：</p>

<ol>
<li>你要使用哪个计时/计数器，是 Timer0 还是 Timer1？用做计时器还是计数器？</li>
<li>你所使用的计时/计数器什么时候开启？开启方式是什么，是软件开启还是硬件开启？</li>
<li>你所使用的计时/计数器的工作模式是上面四种中的哪一个？</li>
<li>开启的时候，计时/计数的初值是多少？每次运行完中断之后的重载值是多少？</li>
</ol>


<p>明确了以上问题，就可以开始设置计时/计数器了。可以遵照下面几步走：</p>

<ol>
<li><p>设置 TMOD。建议 Timer0 和 Timer1 分开设置，运用 <code>ANL</code> 和 <code>ORL</code> 两个命令，在不干扰另一个计时/计数器的情况下，设置自己需要的那一个。虽然命令行数增加，运行时间增加，但是多消耗的时间很少可以忽略，好处是不会混淆。<code>ANL</code> 用来清零，需要清零的位放零，其他位放一，<code>ORL</code>用来置一，需要置一的位放一，其他位放零。例如要设置使用 Timer0作为计数器，软件开启，模式为16位计时/计数器，可以这样设置 TMOD：</p>

<pre><code>ANL TMOD,#11110101B
ORL TMOD,#00000101B
</code></pre></li>
<li><p>设置计时/计数的初值，根据选择的模式和需要，对 THx 和 TLx 进行赋值。当将其作为计时器的时候会有个计时周期（也就是多久进行一次加一操作）的问题。</p>

<p>对于
8051而言，存在两种时间：时钟周期和机械周期。时钟周期就是时钟电路的振荡频率所对应的周期，也就是 $$\frac{1}{f<em>{osc}}$$。机械周期是 CPU 完成一个基本操作（取指令，读或写数据等）所需要的时间，8051中12个时钟周期等于一个机械周期，也就是$$\frac{12}{f</em>{osc}}$$。计时器的计时周期就是机械周期，对于$$12MHz$$震荡频率而言，也就是$$1\mu s$$。这样我们就可以计算出我们需要的初值是多少了。如果选择的模式是16位计时/计数器，我们可以用如下方式进行赋值（x就是你要预设的初值）：</p>

<pre><code> MOV TH0,#HIGH (65536-x)
 MOV TL0,#LOW (65536-x)
</code></pre>

<p> 如果是8位自动重载计时/计数器，可以这样设置初值（y是要重载的值，x是预设的初值）：</p>

<pre><code> MOV TH0,#(256-y)
 MOV TL0,#(256-x)
</code></pre></li>
<li>开启，跟你的需要，在必要时候，将 TRx 置一。</li>
</ol>


<p><img src="https://lh6.googleusercontent.com/-f35zg4EmAZw/UVz2cCeJePI/AAAAAAAAAqU/uyTI6Cl2kE0/s640/Countdown%2520timer%2520with%2520microcontroller%2520AT89C51.png" width="480" alt="AT89C51 制作的时钟（图片来自 Engineers Garage）"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[单片机原理及程序设计 第四章 汇编语言]]></title>
    <link href="http://pikipity.github.io/blog/assembly-language.html"/>
    <updated>2013-03-07T20:39:00+08:00</updated>
    <id>http://pikipity.github.io/blog/assembly-language</id>
    <content type="html"><![CDATA[<p>学习汇编语言可以很好地帮助单片机的学习，而且一个好的汇编语言写成的程序要比实现相同功能的 C 语言更短更快。但是难以理解，移植性差，所以现在一般都用 C 语言来为单片机编程，只有部分硬件的驱动或是 C 语言难以控制的部分来用汇编编写。</p>

<h2>汇编指令分类</h2>

<p>汇编语言中的指令分为两大部分：</p>

<ol>
<li>指令（Instruction）：指令会被编译器编译为机器语言将来提供给单片机。指令的数量很有限，不像 C 语言，内置函数就一堆，所以用到什么查表就可以了，表格会在后面提供。</li>
<li>伪指令（Directive）：伪指令不会被编译器编译为机器语言，仅仅是提供给编译器，为了“编译”而存在的指令。</li>
</ol>


<h2>汇编语言格式</h2>

<p>任何编程语言都有格式，汇编语言也不例外，格式如下：</p>

<pre><code>标记: 操作码 操作数  ;注释
</code></pre>

<p>标记不是每一行都有，需要的时候有就可以了，标记是为了方便对程序内存的寻址，冒号是和标记一起存在的。操作码和操作数就是汇编指令，当然必须有。分号与注释一起存在，不会被编译。</p>

<h2>寻址方式</h2>

<p>再给出所有汇编指令表之前先要介绍一下汇编语言的寻址方式，单片机中对数据的操作最常见的就是将数据从内存的一个地方移到另一个地方，在移动的过程中就需要声明内存地址（内存地址是什么？请回到<a href="http://pikipity.github.com/blog/scm-principle-2.html">第二章</a>，谢谢），那么如何获得这个内存地址呢？就是通过“寻址”来获得。8051 的汇编指令只有四种寻址方式：</p>

<ol>
<li>直接寻址（Direct Addressing，在表格中简写为 Dir）：直接给出一个16进制数，代表资料记忆体的一个字节地址，从这个地址中拿出数据来操作。只能用于内置 RAM</li>
<li>间接寻址（Indirect Addressing，在表格中简写为 Ind）：一个 “@” 的符号在加一个寄存器的名字，例如 <code>@DPTR</code>，从这个寄存器中拿出数据，把这个数据当做地址，再从这个地址中拿出数据来操作。可对内置和外扩 RAM 使用。</li>
<li>寄存器寻址（Register Addressing，在表格中简称 Reg）：直接一个寄存器的名字，例如 <code>R0</code>，从寄存器中拿出数据进行操作。仅对寄存器有效。</li>
<li>立即寻址（Immediate Addressing，在表格中简称 Imm）：一个井号 “#” 再加一个整数，例如 <code>#1011B</code>，直接对这个整数进行操作。</li>
</ol>


<h2>指令表</h2>

<p>为了方便记忆和查询，指令又分为了五类</p>

<ol>
<li><p>数据移动：数据移动的指令又根据被移动的数据所在位置分为三个部分。</p>

<ul>
<li><p>内部 RAM 内数据的移动</p>

<p><img src="/images/post/MOV.jpg" width="550pt"></p></li>
<li><p>外部 RAM 内数据读取与写入</p>

<p><img src="/images/post/MOVX.jpg" width="350pt"></p></li>
<li><p>程序内存数据读取</p>

<p><img src="/images/post/MOVC.jpg" width="350pt"></p></li>
</ul>


<p>注意：</p>

<ul>
<li>Ri 的意思是 R1 或者 R0，不包括 R2 ~ R7</li>
<li><p>MOV 指令代表一个1 byte 的机器语言，所以它的操作数中不可能同时出现多个寄存器，例如 <code>MOV R0,R1</code> 是错误的，只能是</p>

<p>   MOV A,R1
   MOV R0,A</p></li>
</ul>
</li>
<li><p>计算：</p>

<p><img src="/images/post/MATH.jpg" width="550pt"></p></li>
<li><p>逻辑运算：</p>

<p><img src="/images/post/ANL_A.jpg" width="550pt"></p></li>
<li><p>布尔运算和判断：</p>

<p><img src="/images/post/ANL_C.jpg" width="350pt"></p></li>
<li><p>跳转：</p>

<p><img src="/images/post/JUMP_1.jpg" width="550pt"></p>

<p><img src="/images/post/JUMP_2.jpg" width="350pt"></p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[单片机原理及程序设计 第三章 数据类型与表示方法]]></title>
    <link href="http://pikipity.github.io/blog/scm-principle-3.html"/>
    <updated>2013-03-07T10:36:00+08:00</updated>
    <id>http://pikipity.github.io/blog/scm-principle-3</id>
    <content type="html"><![CDATA[<p>对 8051 的编程本质上就是对一个个二进制数在内存中运算和转移，所以明确各种进制（尤其是二进制、十进制和十六进制）在汇编中的表示方法和它们之间的转换方法就非常重要了。</p>

<h2>二进制</h2>

<p>无符号二进制的表示方法很简单，只要在你所要表示的二进制数后面加一个 <strong>“B”</strong> 就可以了。例如 <code>1011011B</code>。8位无符号整数范围为 0 ~ 255。16位无符号整数范围为 0 ~ 65535。</p>

<p>表示有符号二进制的时候，一个 Byte 8位中的最高位表示符号，1为负，0为正，后面7位是你要表示的数的绝对值。8位有符号整数范围为 -128 ~ 127。16位有符号整数范围为 -32768 ~ 32767。</p>

<p>当计算有符号二进制数加法的时候（减法只要转换一下加数的符号就变成加法了，所以是一样的），要先将负数变为2补数，然后再相加。所谓<strong>2补数</strong>，就是这个负数的<strong>绝对值</strong>的二进制数的<strong>反数加一</strong>。例如要求-96的2补数，96转换为二进制为01100000，先求反数为10011111，再加一就是-96的2补数10100000</p>

<h2>十进制</h2>

<p>十进制在汇编中的表示很简单，一个单纯的数（例如<code>129</code>）或是一个数字后面加一个 <strong>&ldquo;D&rdquo;</strong> （例如<code>129D</code>）就可以了。</p>

<p>从二进制到十进制有一种特殊的转换方法，就是BCD转换方法，先将二进制4位为一部分的分开然后在进行转化，下面的例子展示了如何进行转化。</p>

<p><img src="/images/post/scm-principle-3_1.jpg" alt="BCD转化举例" width="200pt"></p>

<p>注意：BCD转化出来的一定是十进制，不要与16进制搞混，虽然看上去一样，但是表示的大小则完全不一样。</p>

<h2>十六进制</h2>

<p>十六进制从0到15分别为 <code>0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F</code></p>

<p>十六进制在汇编中只要在数的后面加一个 <strong>&ldquo;H&rdquo;</strong> 就可以了，例如 <code>2FH</code>。</p>

<p>需要注意的是，在汇编中，如果这个16进制数的第一个数就是一个字母的话需要在字母前加一个 <strong>&ldquo;0&rdquo;</strong>，例如 <code>0FEH</code>。</p>

<h2>小数</h2>

<p>上面介绍的都是整数，小数的表示则比较复杂。小数分为定点小数和浮点小数。</p>

<h3>定点小数</h3>

<p>定点小数的小数位数是固定的，定点小数表示简单，我们可以随意设定自己这个程序里面小数定点小数的表示方法，比如，我们可以规定我们的小数为8位，小数点前的数为7位，最前面还有一个符号位，那么我们的小数就表示如下图所示：</p>

<p><img src="/images/post/scm-principle-3_2.jpg" alt="定点小数表示" width="250pt"></p>

<p>定点小数的好处是表示简单、计算方便。缺点也很明显，无法表示拥有很多的小数位数的数，所以我们需要浮点小数。</p>

<h3>浮点小数</h3>

<p>浮点小数的小数为不固定，而是用科学计数法的方式记录小数，一个浮点小数分为三部分：符号位 S、阶码位 P 和尾数为 M，所标表示意思如下：</p>

<p>$$(-1)<sup>S</sup>\times M\times 2<sup>P</sup>$$</p>

<p>浮点小数又分为单精度浮点和双精度浮点：</p>

<ol>
<li>单精度浮点的阶码为8位，位数为23位，共32位（即四个字节）。</li>
<li>双精度浮点的阶码为11位，位数为52位，共64位（即八个字节）。</li>
</ol>


<p>由于双精度和单精度除了长度以外都相同，所以这里只介绍单精度，双精度请自行脑补。</p>

<p>单精度浮点数表示格式如下：</p>

<p>|S（第31位）|P（30位到23位）|M（22为到0位）|</p>

<p>根据 IEEE 754 的标准，浮点小数有四种特殊情况：</p>

<ol>
<li>P 和 M 都为全0的时候，表述0</li>
<li>P 为全0，M 不为全0，是非规范形式</li>
<li>P 为全1，M 为全0的时候，表示无穷大，符号位确定正负</li>
<li>P 为全1，M 不为全0的时候，表示“这不是一个数”</li>
</ol>


<p>也就是说，单浮点最大为 <code>0 11111110 11111111111111111111111</code>，也就是 3.40282346638529E+38，最小为 <code>1 11111110 11111111111111111111111</code>，也就是 -3.40282346638529E+38，最接近0的数是 <code>0 00000000 00000000000000000000001</code>，也就是 1.40129846432482E-45。</p>

<h3>二进制单精度浮点小数转化为十进制方法</h3>

<p>将单精度浮点小数转化为十进制比较简单，只要按照对应的部分转化就可以得到对应的十进制数了，转化规律如：</p>

<ol>
<li>符号位：0为正，1为负。</li>
<li>阶码位：对应的十进制减127（双浮点减1023）。例如阶码位为 <code>10001010</code> ，那么对应的2的指数就是 $138-127=11$。</li>
<li>尾数位：在尾数位的最左边补一个1，将小数点放在这个1的后面，进行转化，所得到的就是尾数了。例如，尾数位为 <code>01110101100011100010001</code>，那么对应的尾数就是 $1.4592$</li>
<li><p>按照公式组合就可以了，这里公式再次给出一边：</p>

<p>$$(-1)<sup>S</sup>\times M\times 2<sup>P</sup>$$</p></li>
</ol>


<h3>十进制小数转化为二进制单精度浮点的方法</h3>

<p>将十进制转化为单浮点二进制就比较麻烦了，可以按照下面的方法：</p>

<ol>
<li>符号位就不说了，主要是计算阶码位和尾数位。首先判断要转化的十进制是不是纯小数（纯小数的意思是无整数部分），如果是就到第三步，如果不是继续到第二步</li>
<li><p>不是纯小数，就可以把数字分为两部分，整数部分和小数部分，整数部分就按照普通的方法转换就可以了，小数部分可以通过下面的方法转换：</p>

<p><img src="/images/post/scm-principle-3_3.jpg" alt="十进制小数部分转化方法" width="350pt"></p>

<p>然后将转化出来的二进制数的小数部分和整数部分组合在一起，左移小数点直到整数部分只剩一个1为止，小数部分取左起23位就是尾数位，将小数点移动的位数加127，转化为二进制就是阶码位。</p></li>
<li><p>如果是纯小数就要先将纯小数转化为 $$1.\cdots\times 2<sup>n</sup>$$ 的形式，可以通过下面的公式转化（公式中 $X$ 代表待转换的十进制纯小数）：</p>

<p>$$n=\mbox{int}(log_2 X-1)$$</p>

<p>然后将转化之后的小数部分按照步骤2中方法进行转化，结果取左起23位就是尾数为，$n+127$ 转化为二进制就是阶码位。</p></li>
</ol>


<p>为了方便大家进行二进制、十进制和十六进制之间的转换，我用 Python 编写了一个小程序，下载在<a href="http://pikipity.github.com/Binary-Converter/">这里</a>，如果发现有什么 Bug，欢迎指正，谢谢。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[汇编实战之LED数码管]]></title>
    <link href="http://pikipity.github.io/blog/assembly-application-3.html"/>
    <updated>2013-02-08T21:25:00+08:00</updated>
    <id>http://pikipity.github.io/blog/assembly-application-3</id>
    <content type="html"><![CDATA[<p>之前已经讲述了如何用汇编来实现<a href="/blog/assembly-application-1.html">加减</a><a href="/blog/assembly-application-2.html">乘除</a>的实现方法，但是只是做运算是远远不够的，还需要将运算后的数字显示出来，那么如何显示呢，这篇讲述如何用时钟中断以尽量少的I/O口的数量来实现LED数码管的显示。</p>

<!--more-->


<h3>算法</h3>

<p>说是算法，很不准确啊，但是没有想出更好的题目了，主要是介绍一下我的想法，这种想法还是非常常见和好用的。主要为两点：</p>

<ol>
<li><p>不是所有数码管同时亮，而是一个一个的亮，利用人眼的视觉误差，让人感觉是一起亮就可以了。由于<a href="http://zh.wikipedia.org/wiki/%E8%A6%96%E8%A6%BA%E6%9A%AB%E7%95%99">人眼的视觉停留</a>大约为0.1s，也就是说要在0.1s内将全部数码管显示一遍，这里我们放置了5个，显示一个的时间大约是0.02s，这里使用12MHz的晶振，时钟周期位$\frac{1}{12}$us，机械周期为1us，那么计时器设定为计时20000就可以了。</p></li>
<li><p>由于十进制数字只有$0\sim 9$十个数字，数量少且固定，所以可以通过查表法来控制数码管。</p></li>
</ol>


<h3>电路图</h3>

<p><img src="/images/post/assembly-application-3.png" alt="数码管显示电路图"></p>

<p>主要原件如下：</p>

<ol>
<li>8051系列单片机使用 AT89C51。</li>
<li>数码管选择7段共阴数码管。</li>
<li><p>用来选择数码管的38译码器 74HC138，这样就可以只用三个引脚就可以最多从8个数码管中选择一个了。74HC138的真值表如下</p>

<p><img src="/images/post/assembly-application-3-table.png" alt="74HC138真值表"></p></li>
</ol>


<h3>程序</h3>

<p>这个程序是让电路图中的五个数码管从左到右显示数字 1,2,3,4,5</p>

<pre><code>    ORG 0H
    JMP START
    ORG 0BH    ;0BH is the timer0 interrupt address
    JMP DISPLAY
    ORG 30H    ;avoid interrupt address
    MOV SP,#30H
;;;;;;;;;;;;;;;;;;;;;;;;;;
;Display five 7-seg LEDs
;note: the most left LED is number 1
;input: 5FH, 5EH, 5DH, 5CH, 5BH
;output: P2.0, P2.1, P2.2 -&gt; choose LED
;        P1 -&gt; display
;REG: A (has been protect), DPTR, 5AH
DISPLAY:
    PUSH Acc
    ;choose LED
    MOV A,5AH
    MOV P2,A
    ;choose number
    MOV A,5AH
    CJNE A,#0,next1
display0:
    MOV A,5FH
    MOVC A,@A+DPTR
    MOV P1,A
    JMP display_end
next1:
    CJNE A,#1,next2
display1:
    MOV A,5EH
    MOVC A,@A+DPTR
    MOV P1,A
    JMP display_end
next2:
    CJNE A,#2,next3
display2:
    MOV A,5DH
    MOVC A,@A+DPTR
    MOV P1,A
    JMP display_end
next3:
    CJNE A,#3,next4
display3:
    MOV A,5CH
    MOVC A,@A+DPTR
    MOV P1,A
    JMP display_end
next4:
    CJNE A,#4,display_end
display4:
    MOV A,5BH
    MOVC A,@A+DPTR
    MOV P1,A
    JMP display_end
display_end:
    MOV A,5AH
    CJNE A,#4,add_5AH
    JMP clear_5AH
clear_5AH:
    MOV 5AH,#0
    JMP displayend
add_5AH:
    INC 5AH
    JMP displayend
    ;
displayend:
    MOV TL0,#low (65536-20000)
    MOV TH0,#high (65536-20000)
    POP Acc
    RETI        
;table of LED
table:
    DB 3FH,06H,5BH,4FH,66H,6DH,7DH,07H,7FH,6FH
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
START:
;;;;;;;;;;;;;;;;;;;;;;;;;;
;Display initial
    MOV P1,#0
    MOV P2,#0FFH
    MOV 5AH,#0
    MOV DPTR,#table
;;;;;;;;;;;;;;;;;;;;;;;;;;
;Timer initial
    MOV TMOD,#1;use timer 0 mode 1
    MOV TL0,#low (65536-20000)
    MOV TH0,#high (65536-20000)
;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Interrupt initial
    SETB ET0;start timer0 interval
    ;
    SETB EA    ;start interrupt
    SETB TR0   ;start timing
    MOV 5FH,#1
    MOV 5EH,#2
    MOV 5DH,#3
    MOV 5CH,#4
    MOV 5BH,#5
    ;
STOP:
    JMP STOP
    END
</code></pre>

<h3>效果</h3>

<p>将速度放慢后的仿真效果是这样的：</p>

<p><img src="/images/post/assembly-application-3-result.gif" alt="仿真效果"></p>

<p>注意：由于仿真软件只是显示仿真的计算效果，可能会由于时间调整不恰当，出现不合适的仿真结果，建议可能的话，还是用实物比较靠谱</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[汇编实战之乘除法]]></title>
    <link href="http://pikipity.github.io/blog/assembly-application-2.html"/>
    <updated>2013-02-08T09:35:00+08:00</updated>
    <id>http://pikipity.github.io/blog/assembly-application-2</id>
    <content type="html"><![CDATA[<p>上一篇<a href="/blog/assembly-application-1.html">《汇编实战之加减法》</a>中介绍了加减法的考虑方法，接下来将会介绍稍微难一点乘除法的思考与实现方法。</p>

<!--more-->


<h2>一个16位二进制乘以一个8位二进制</h2>

<h3>算法</h3>

<p>乘法还是很简单的，和加减法没有太大的不同，但要注意得数的范围。同样的，先看8051的汇编指令表，其中已经提供了一个用来做两个8位二进制之间的乘法的指令：</p>

<pre><code>MUL AB
</code></pre>

<p>这条指令同时对累加器Acc与累乘器B作用，将Acc与B中的数值相乘以后，高8位到B中，低八位到Acc中。那么还是依照加法算法的思考路线，我们就可以这样了：</p>

<p>$$\begin{array}{rcl}
c&amp;=&amp;a<em>b\
&amp;=&amp;\left([a_{15}\cdots a_8]\times256+[a_7\cdots a_0]\right)</em>[b_7\cdots b_0]\
[c<em>{15}\cdots c_8]\times 256+[c_7\cdots c_0]&amp;=&amp;\left([a</em>{15}\cdots a_8]<em>[b_7\cdots b_0]\right)\times256+\left([a_7\cdots a_0]</em>[b_7\cdots b_0]\right)
\end{array}$$</p>

<p>在上面的式子中，我用“$*$”标记需要用MUL指令来做乘法的地方，用"$\times$&ldquo;来标记需要移位的地方。低八位相乘会产生一个16位的二进制数，高八位相乘再移位后会产生一个24位的二进制数，所以至少我们需要3个地址来存放得数。</p>

<p>那么还需不需要考虑低八位乘积的16位数与高八位乘积的24位数相加的进位呢？由于16位二进制最大换算成十进制是65536，而八进制是255，所以得数最大是16777216，也就是说会刚好超出24位，所以得数还需要一个C来存放进位。这样就可以开始编程了。</p>

<h3>汇编子程序</h3>

<pre><code>;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Multiplication of unsigned number
;input: 16 bits: 7CH 7DH
;        8 bits:     7FH
;output 24 bits: C 60H 61H 62H
;REG:A(have been protected), B(have been protected), 63H, C
Multi:
    PUSH Acc   ;protect Acc
    PUSH B     ;protect B
    ;Multiply low 8 bits
    MOV A,7DH
    MOV B,A
    MOV A,7FH
    MUL AB
    MOV 62H,A
    MOV A,B
    MOV 61H,A
    ;Multiply high 8 bits
    MOV A,7CH
    MOV B,A
    MOV A,7FH
    MUL AB
    MOV 63H,A
    MOV A,B
    MOV 60H,A
    ;Summation center 8 bits
    CLR C
    MOV A,63H
    ADD A,61H
    MOV 61H,A
    ;Add C and high 8 bits
    MOV A,60H
    ADDC A,#0
    MOV 60H,A
    ;
    POP B      ;back B
    POP Acc    ;back Acc
    RET
</code></pre>

<h2>一个16位二进制除以一个8位二进制</h2>

<h3>算法</h3>

<p>通过查汇编指令表，我们可以发现，和乘法一样8051也提供了一个8位二进制的除法指令：</p>

<pre><code>DIV AB
</code></pre>

<p>还是对Acc与B作用，商到Acc中，余数到B中。但是除法比较特殊，当我们通过与上面乘法类似的算法考虑的时候，会得到下面的式子：</p>

<p>$$\begin{array}{rcl}
c&amp;=&amp;\frac{a}{b}\
&amp;=&amp;\left(a\mbox{的高八位与}b\mbox{的商}\times256+a\mbox{的低八位与}b\mbox{的商}\right)\
&amp;&amp;+\left(\frac{a\mbox{的高八位与}b\mbox{的余数}\times256+a\mbox{的低八位与}b\mbox{的余数}}{b}\right)
\end{array}$$</p>

<p>最终得到，商的高八位就是$a$的高八位与$b$的商，商的低八位就是$a$的低八位与$b$的商，余数的高八位就是$a$的高八位与$b$的余数，余数的低八位就是$a$的低八位与$b$的余数。但是经过测试，这是不正确的，为什么呢？再次观察我们最后的结论就会发现问题，式子本身没有问题，<strong><em>问题在于进位</em></strong>。尽管$a$的高八位与$b$的余数和$a$的低八位与$b$的余数分别与$b$做除法的时候无法再出现非0商了，但是两者加起来却有可能大于$b$，在与$b$做除法的时候就会出现非0商，如果单纯按照上面的方法做，我们就会少考虑这个由余数产生出来的商的进位。所以上面的算法行不通。</p>

<p>最终我采用的是移位的方法，原理类似与笔算除法。基本流程如下</p>

<p><img src="/images/post/assembly-application-2.png" width="400pt" alt="除法流程图"></p>

<h3>汇编子程序</h3>

<pre><code>;;;;;;;;;;;;;;;;;;;;;;;;;
;Division for unsigned integer
;input: 16 bits: 64H 65H
;        8 bits: 66H
;output: quotient: 67H 68H
;        remainder: 69H
;Reg: A(has been protected), B(has been protected), C, 6AH
division:
    PUSH Acc   ;protect Acc
    PUSH B     ;protect B
    CLR C      ;clear C
    ;clear result
    MOV 67H,#0
    MOV 68H,#0
    MOV 69H,#0
    MOV 70H,#0
    MOV 6BH,#0
    ;division for high 8 bits
    MOV A,66H
    MOV B,A
    MOV A,64H
    DIV AB
    ;quotient go to high quotient of final result
    MOV 67H,A
    ;remiander go to remainder of final result
    MOV A,B
    MOV 69H,A
    ;begin 8 times of loop
    MOV 6AH,#8
division_loop:
    ;rotate 65H left with C
    MOV A,65H
    RLC A
    MOV 65H,A
    ;rotate 69H left with C
    MOV A,69H
    RLC A
    MOV 69H,A    ;result -&gt; rotate 69H and 65H left together with C
    ;69H - 66H
    CLR C
    MOV A,69H
    SUBB A,66H   ;if negative C=1, otherwise C=0. Result in A
    ;
    JC division_quotient_set_0   ;if C=1, go to division_quotient_set_0
division_quotient_set_1:    ;if C=0, go down
    MOV 69H,A     ;sub result go to 69H
    ;most right bit of 68H set 1
    SETB C
    MOV A,68H
    RLC A
    MOV 68H,A
    ;go to dicision
    JMP division_loop_dicision
division_quotient_set_0:    ;if C=1, go down
    ;most right bit of 68H set 0
    CLR C
    MOV A,68H
    RLC A
    MOV 68H,A
division_loop_dicision:
    DEC 6AH
    MOV A,6AH
    CJNE A,#0,division_loop
    ;
    POP B      ;get back B
    POP Acc    ;get back Acc
    RET
</code></pre>
]]></content>
  </entry>
  
</feed>
