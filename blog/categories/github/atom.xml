<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Categories: Github | 折腾来折腾去]]></title>
  <link href="http://pikipity.github.io/blog/categories/github/atom.xml" rel="self"/>
  <link href="http://pikipity.github.io/"/>
  <updated>2016-02-15T21:04:31+08:00</updated>
  <id>http://pikipity.github.io/</id>
  <author>
    <name><![CDATA[pikipity]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Github 五岁了]]></title>
    <link href="http://pikipity.github.io/blog/github-5-years-old.html"/>
    <updated>2013-04-12T14:48:00+08:00</updated>
    <id>http://pikipity.github.io/blog/github-5-years-old</id>
    <content type="html"><![CDATA[<p>感谢 Tom Preston-Werner、Chris Wanstrath和PJ Hyett 创建这样一个资源共享、合作平台，收集了一些 Github 章鱼猫的图片，可以到<a href="http://pan.baidu.com/share/link?shareid=472164&amp;uk=4080321956">这里</a>下载合集（共28张）</p>

<p><img src="https://lh3.googleusercontent.com/-GtUg-uGWQqM/UWevcsehRSI/AAAAAAAAAtc/kLS-HYQ3bOo/s224/images%2520%25287%2529.jpeg" width="200"><img src="https://lh5.googleusercontent.com/-xIBU5KTBVcI/UWevbE4xKAI/AAAAAAAAAsY/E-TE4XsxJgw/s224/images%2520%25282%2529.jpeg" width="200"><img src="https://lh6.googleusercontent.com/-B9FrMxvY9oM/UWevdOl2eWI/AAAAAAAAAtY/0OzTMCCARKE/s224/images%2520%25289%2529.jpeg" width="200"><img src="https://lh3.googleusercontent.com/-GhzQ2PNotbI/UWevacnK2rI/AAAAAAAAAuI/ud_BkEGqWTk/s235/images%2520%252817%2529.jpeg" width="200"><img src="https://lh3.googleusercontent.com/-VkRkffqG3p0/UWevYtjxHLI/AAAAAAAAAts/vkcrXe-KnZw/s512/founding-father.jpg" width="200"><img src="https://lh6.googleusercontent.com/-0BwtaQ5bB_I/UWevZOsK-YI/AAAAAAAAAtw/m31AKo0PS30/s224/images%2520%252811%2529.jpeg" width="200"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[向 Github 添加 SSH 公匙]]></title>
    <link href="http://pikipity.github.io/blog/ssh-public-key.html"/>
    <updated>2013-03-12T20:03:00+08:00</updated>
    <id>http://pikipity.github.io/blog/ssh-public-key</id>
    <content type="html"><![CDATA[<p>今天用 octopress 遇到一点小问题，在向 Github 发布自己的 post 的时候出现错误：</p>

<pre><code>Permission denied (publickey). fatal: The remote end hung up unexpectedly
</code></pre>

<p>看到 publickey，我突然想到我好想忘了向 Github 添加我自己的公匙了，问了一下谷姐，看到<a href="http://stackoverflow.com/questions/3617113/github-newbie-problems-permission-denied-publickey-fatal-the-remote-end">这里</a>的解答，果然是这个原因。我想如果重新设定一下 octopress 的github 登陆设置应该也是可以的，但是如果每次重启电脑都要这样来一次也太麻烦了，于是果断还是去添加一次吧，一劳永逸（最好还是先到<a href="https://help.github.com/articles/error-permission-denied-publickey">这里</a>按照步骤检查一下）。</p>

<p>Mac 设置方法见<a href="https://help.github.com/articles/generating-ssh-keys#platform-mac">这里</a>，Windows 设置方法见<a href="https://help.github.com/articles/generating-ssh-keys#platform-windows">这里</a>（Windows 需要在 Git Bash 里使用下面的命令），Linux 见<a href="https://help.github.com/articles/generating-ssh-keys#platform-linux">这里</a>，三者大同小异，唯一的区别应该就是复制 ssh key 的时候使用的命令不一样吧。步骤如下：</p>

<ol>
<li><p>检查是否存在 .ssh 文件夹</p>

<pre><code> $ cd ~/.ssh
</code></pre>

<p> 如果没有这个文件夹，跳到第三步，如果有，则继续</p></li>
<li><p>备份一下当前已有的 ssh 秘钥</p>

<pre><code> $ ls
 $ mkdir key_backup
 $ cp id_rsa* key_backup
 $ rm id_rsa*
</code></pre></li>
<li><p>产生新的 ssh 秘钥</p>

<pre><code> $ ssh-keygen -t rsa -C "your_email@example.com"
</code></pre>

<p> &ldquo;<a href="&#109;&#97;&#105;&#108;&#116;&#x6f;&#58;&#121;&#x6f;&#x75;&#x72;&#95;&#x65;&#109;&#97;&#x69;&#x6c;&#64;&#x65;&#120;&#97;&#109;&#x70;&#108;&#101;&#x2e;&#99;&#x6f;&#x6d;">&#x79;&#x6f;&#117;&#x72;&#x5f;&#101;&#x6d;&#97;&#105;&#x6c;&#64;&#x65;&#120;&#97;&#x6d;&#x70;&#108;&#101;&#46;&#99;&#x6f;&#109;</a>"就是github上你用来上传的邮箱，如果你没修改过就是你用来注册账户的那个邮箱，输入上面的命令并回车后会引导你生成你的 RSA 秘钥对，如下：</p>

<pre><code> Enter file in which to save the key (/Users/you/.ssh/id_rsa): [按回车]
 Enter passphrase (empty for no passphrase): [输入一个通关密语]
 Enter same passphrase again: [把通关密语再输一遍]
</code></pre>

<p> 通关密语一般建议输入一个10到30字元的字符串（别输中文），这关系到你将来传输信息的保密性。成功后你会看到<strong>如</strong>下内容</p>

<pre><code> Your identification has been saved in /Users/you/.ssh/id_rsa.
 Your public key has been saved in /Users/you/.ssh/id_rsa.pub.
 The key fingerprint is:
 01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com
</code></pre></li>
<li><p>将我们的 ssh 秘钥添加到 Github。首先复制我们的公匙，Mac 用下面的命令：</p>

<pre><code> $ pbcopy &lt; ~/.ssh/id_rsa.pub
</code></pre>

<p> Linux 用下面的命令（如果没有 xclip，先安装一下吧，很好用，<code>sudo apt-get install xclip</code>）：</p>

<pre><code> $ xclip -sel clip &lt; ~/.ssh/id_rsa.pub
</code></pre>

<p> Windows 用下面的命令：</p>

<pre><code> $ clip &lt; ~/.ssh/id_rsa.pub
</code></pre>

<p> 然后就是到 Github 网站把公匙粘贴过去。步骤如下：</p>

<ul>
<li><p>到你的<a href="https://github.com/settings">账户设定</a>中</p>

<p><img src="https://github-images.s3.amazonaws.com/help/userbar-account-settings.png" width="350pt"></p></li>
<li><p>点击左栏中的 <a href="https://github.com/settings/ssh">&ldquo;SSH Keys&rdquo;</a></p>

<p><img src="https://github-images.s3.amazonaws.com/help/settings-sidebar-ssh-keys.png" width="350pt"></p></li>
<li><p>点击 &ldquo;Add SSH key&rdquo;</p>

<p><img src="https://github-images.s3.amazonaws.com/help/ssh-add-ssh-key.png" width="350pt"></p></li>
<li><p>在 “Key” 的输入框中粘贴</p>

<p><img src="https://github-images.s3.amazonaws.com/help/ssh-key-paste.png" width="350pt"></p></li>
<li><p>点击 “Add key”</p></li>
</ul>
</li>
<li><p>现在你可以测试一下了，用下面命令</p>

<pre><code> $ ssh -T git@github.com
</code></pre>

<p> 你会得到下面信息：</p>

<pre><code> The authenticity of host 'github.com (207.97.227.239)' can't be established.
 RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.
 Are you sure you want to continue connecting (yes/no)?
</code></pre>

<p> 输入 &ldquo;yes"，回车，你会看到下面信息：</p>

<pre><code> Hi username! You've successfully authenticated, but GitHub does not provide shell access.
</code></pre>

<p> 如果 &ldquo;username&rdquo; 正确，那么就 OK 了。</p></li>
</ol>


<p>如果你看到 &ldquo;access denied"，请考虑使用 <a href="https://help.github.com/articles/set-up-git">HTTPS</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用Octopress 和 Github 建立自己的 Blog]]></title>
    <link href="http://pikipity.github.io/blog/octopress-and-github.html"/>
    <updated>2013-02-22T08:44:00+08:00</updated>
    <id>http://pikipity.github.io/blog/octopress-and-github</id>
    <content type="html"><![CDATA[<p>这个 Blog 就是在使用 Octopress 和 Github 建立起来的。基本思路如下，首先用 Markdown 语言迅速成文，然后由 Octopress 生成站点文件并上传到 Github，利用 Github 的 Pages 功能，就可以直接通过访问 Github 提供的二级域名访问到你的站点了。</p>

<p><img src="/images/post/octopress.jpg" width="550pt"></p>

<!--more-->


<h3>为什么用 Octopress</h3>

<p>有很多人看到就会吐槽了，为什么不用 WordPress 呢？那么下面就做一下 Octopress 和 WordPress 的对比好了。</p>

<p>|&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;|
|            |Octopress|WordPress|
|:&mdash;&mdash;&mdash;-:|:&mdash;&mdash;-:|:&mdash;&mdash;-:|<br/>
|使用的脚本语言|Ruby     |PHP      |
|生成网页     |静态网页  |动态网页   |
|外挂、主题数量|少       |多        |
|速度        |快       |慢        |
|易用性      |起点比较高|简单       |</p>

<p>其实准确的说 Octopress 并不是只能生成静态网页，但是这里介绍的是 Octopress 和 Github 联合使用，由于 Github 并不是一个服务器代理商，Pages本身只是为简单的项目主页准备的，所以没有数据库，每次打开网页都是一个新生成的过程，所以只能支持静态网页。</p>

<p>从上面的表格就可以看出两者各有优缺点，我选择 Octopress 的原因很简单：</p>

<ol>
<li>需要折腾</li>
<li>可改动性大</li>
<li>markdown 语法直接成文，舒服</li>
</ol>


<p>但是由于 Octopress 本身刚起步，国内教程、论坛都少的可怜，所以大部分的学习只能去看外国的网站，或是直接去 Github 上拉别人的网页来研究。下面就是如何在自己的电脑上安装 Octopress 和利用 Github 来搭建 Blog 了。下面的安装和使用都以 Mac OS X 10.8 为基础，我想 Linux 应该也是差不多的，Windows 应该比较麻烦，请看<a href="http://yanping.me/cn/blog/2011/12/26/octopress-on-windows/">这里</a></p>

<h3>前期准备</h3>

<p>首先你要具备一点 *nix 命令行的知识和 html 语言的知识。下面提供三个网址可以先看一下：</p>

<ul>
<li><a href="http://www.douban.com/note/75797151/">Mac 终端命令</a></li>
<li><a href="http://www.linuxguide.it/command_line/linux_commands_cn.html">Linux 终端命令</a></li>
<li><a href="http://www.w3schools.com/html/default.asp">html 语言教程</a></li>
</ul>


<p>接下来就要做一些 Octopress 安装前的准备工作了。由于 Octopress 需要 Ruby 1.9.2，运行</p>

<pre><code>$ ruby -v
</code></pre>

<p>检查一下版本号是否正确，如果正确，就可以直接安装 Octopress 了，如果版本不对就还是按照下面的步骤走一遍吧。</p>

<ol>
<li>安装 GCC。如果已经安装了 Xcode，就可以不必安装了，由于后面的安装会需要源文件编译，所以需要安装 GCC 来提供支持，可以到<a href="https://github.com/kennethreitz/osx-gcc-installer">这里</a>下载对应版本的 GCC 来安装</li>
<li><p>安装 Homebrew，Homebrew 是 Mac 上的一个包管理器，后面为了方便，将直接用 Homebrew 来完成 Git 安装。运行下面指令来安装</p>

<pre><code> $ ruby -e "$(curl -fsSL https://raw.github.com/mxcl/homebrew/go)"
</code></pre>

<p>Homebrew 如何使用可以直接到<a href="http://mxcl.github.com/homebrew/">这里</a>来看，安装那些 Mac 本身没有的包还是很方便的。</p></li>
<li><p>安装 Git。运行下面命令来安装</p>

<pre><code> $ brew install git
</code></pre></li>
<li><p>安装 RVM，RVM 是 Ruby 的一个版本管理器，为了方便安装，可以直接到<a href="http://jewelrybox.unfiniti.com/">这里</a>下载 具有 GUI 的版本，这个的安装过程就和 Mac 上的其他软件没有什么不同了。</p></li>
<li>安装 Ruby 1.9.2，绕了一大圈，终于到重点了。运行下面的两条命令安装     $ rvm install 1.9.2     $ rvm 1.9.2 &ndash;default</li>
</ol>


<h3>安装 Octopress</h3>

<p>主角登场。</p>

<p>先在终端移动到你准备存放 Octopress 的地方，用下面的命令</p>

<pre><code>$ cd 你的路径
</code></pre>

<p>然后直接用 Git 将 Octopress 从 Github 上拖下来就可以了，用下面的命令</p>

<pre><code>$ git clone git://github.com/jsw0528/octopress.git
</code></pre>

<p>OK，在你当前路径下应该会多出一个叫 octopress 的文件夹，里面的就是 octopress 的程序了，这就叫做轻量。</p>

<p>还需要安装一些基本的套件，否则生成的东西实在没法看，运行下面命令安装相关套件</p>

<pre><code>$ cd octopress
$ bundle install
</code></pre>

<p>然后就是安装主题了，这里可以有三种选择（支线剧情 Flag，+_+）：</p>

<ol>
<li><p>使用预设主题，预设主题本身其实已经挺不错了，但是万千世界千篇一律就没意思了，可以将默认主题做模板来修改出自己的主题，用下面的命令安装预设主题</p>

<pre><code> $ rake install
</code></pre></li>
<li><p>直接使用别人的主题或是在别人的主题上稍作修改，这里推荐两款</p>

<ul>
<li><p>极简风格的 Slash，大家可以到其<a href="http://zespia.tw/Octopress-Theme-Slash/index_tw.html">主页</a>看效果，其实这个 Blog 的主题就是在 Slash 上修改出来的，安装使用下面命令：</p>

<pre><code>   $ git clone git://github.com/tommy351/Octopress-Theme-Slash.git .themes/slash
   $ rake install['slash']
</code></pre></li>
<li><p>由 <a href="https://github.com/eDoctor">eDoctor</a> 开发的主题，大家可以来 <a href="http://mrzhang.me/">MrZhang.me</a> 来看效果，主题名就叫 &ldquo;blog"，安装方法如下</p>

<pre><code>  $ git submodule init
  $ git submodule update
  $ rake install['blog']
</code></pre></li>
<li><p>如果你觉得别人的主题都太烂了，Come on，自己做一个吧</p></li>
</ul>
</li>
</ol>


<p>安装完主题，Octopress 就算是安装完了，不要松懈，一切才刚刚开始</p>

<h3>连接 Github 账号</h3>

<ol>
<li><p>到<a href="https://github.com">这里</a>注册一个 Github 账户，创建一个新的 Repository，名称为 <code>你的帐号.github.com</code>。</p></li>
<li><p>修改 Octopress 安装目录下的 <code>source/CNAME</code></p>

<ul>
<li>如果你要使用自己的域名，就将<code>source/CNAME</code>修改成你自己的域名，然后将域名的 A Record 指向 IP：<code>207.97.227.245</code>就可以了</li>
<li>如果直接使用 Github 提供的二级域名，就直接删除 <code>source/CNAME</code> 文件</li>
</ul>
</li>
<li><p>运行下面命令</p>

<pre><code> $ rake setup_github_pages
</code></pre>

<p> 会提示输入有读写权限的 Repository url，可以在你刚才新建的 Repository 里面找到，具体位置见图片</p>

<p> <img src="/images/post/Repository_url.jpg" alt="Repository_url 在这里" width="550pt"></p></li>
</ol>


<h3>配置 Octopress</h3>

<p>一般只需要配置两个文件就可以了</p>

<ol>
<li>配置 <code>_config.yml</code>：这个文件在你的安装目录下面，里面是你 Blog 的一些基本配置，比如名字、创建时间等等，懂英文的一般都懂了一条条是什么意思，需要注意的是冒号后面的一个空格不要漏掉，<a href="https://gist.github.com/pikipity/5010379">这里</a>是我的 <code>_config.yml</code>，大家可以参考参考。</li>
<li>配置 <code>Rakefile</code>：这是软件的配置，不明白是什么就不要乱动了，有时候当你写 post 的时候会发现自动生成的文件格式不适合你，你可以修改 <code>Rakefile</code> 中 <code>new_post_ext</code> 对应的内容。</li>
</ol>


<p>至此，Octopress 就算是安装配置完了，你可以用它来生成博文并发布了。Octopress 的命令可以用下面的方法查询</p>

<pre><code>$ rake -T
</code></pre>

<p>命令不多，真正常用的就几个，下面列出来：</p>

<ul>
<li><code>rake generate</code>：生成站点</li>
<li><code>rake deploy</code>：发布站点</li>
<li><code>rake gen_deploy</code>：上面两条命令的结合</li>
<li><code>rake new_post[title]</code>：在 <code>source/_posts</code> 中生成一个新的 post</li>
<li><code>rake new_page[filename]</code>：在 <code>source/(filename)/index.markdown</code> 中生成一个新页面</li>
<li><code>rake preview</code>：预览站点，默认在浏览器打开 <code>localhost:4000</code> 就可以预览</li>
</ul>

]]></content>
  </entry>
  
</feed>
