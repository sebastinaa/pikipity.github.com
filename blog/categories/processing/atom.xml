<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Categories: Processing | 折腾来折腾去]]></title>
  <link href="http://pikipity.github.io/blog/categories/processing/atom.xml" rel="self"/>
  <link href="http://pikipity.github.io/"/>
  <updated>2016-02-15T21:04:31+08:00</updated>
  <id>http://pikipity.github.io/</id>
  <author>
    <name><![CDATA[pikipity]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Little Mr. (Processing)]]></title>
    <link href="http://pikipity.github.io/blog/little-mr.html"/>
    <updated>2014-01-25T11:53:00+08:00</updated>
    <id>http://pikipity.github.io/blog/little-mr</id>
    <content type="html"><![CDATA[<p><img src="https://lh4.googleusercontent.com/-4rtsj4SZzO8/UuM2hEEYOSI/AAAAAAAABcw/mQbtyYFSs2E/s650/58b1OOOPIC1a.jpg" alt="新年快乐" /></p>

<p>现在拜年有点早，但是到新年那天可能就没有时间发东西了，先拜个早年了。</p>

<p><img src="https://lh6.googleusercontent.com/-HbH2WbH4u_Y/UuCKi-omRgI/AAAAAAAABcc/fLa4WUNNEuM/s512/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202014-01-23%2520%25E4%25B8%258A%25E5%258D%258811.13.14.png" alt="Little Mr." /></p>

<p>这次用 processing 做了个小东西，我管它叫 &ldquo;Little Mr."，能跑能说话，现在只能进行几个简单的问答，允许用户自己输入问答配对。反正东西暂时做成这样了，后续还会加点小功能吧。想做个桌面宠物，但是到现在都不知道如何入手。。。更详细的介绍和使用说明去看<a href="https://github.com/pikipity/Little_Mr.git">我的 Github </a>吧。下面是一段演示视频：</p>

<iframe height="510" width="489" src="http://player.youku.com/embed/XNjY1NzYyMzAw" frameborder="0" allowfullscreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自制 Keynote IR Remote Control]]></title>
    <link href="http://pikipity.github.io/blog/diy-apple-remote-controller.html"/>
    <updated>2013-11-28T18:47:00+08:00</updated>
    <id>http://pikipity.github.io/blog/diy-apple-remote-controller</id>
    <content type="html"><![CDATA[<p><img src="https://lh6.googleusercontent.com/-02eVPhz8fdE/UpcgK1x33qI/AAAAAAAABY0/SDuT9V15AK0/s400/MC377.jpeg" alt="Apple IR Remote Control" /></p>

<p>上图就是 Apple IR Remote Control，利用红外线对 iPod, Apple TV 等苹果设备进行视频播放和音乐播放等控制。对于 Macbook，可以控制 iTunes 的音乐视频播放和 Keynote 的幻灯片演示。官网价钱是港币 148 一个，如果它是蓝牙控制，这个价钱也就没什么了，但是为了一个红外线控制器，这个价钱就不是太值了。但是在使用我的 Macbook Pro 上的 Keynote 做演讲的时候，每次切换幻灯片都要跑到键盘前操作还是太麻烦了，学校网络的问题，iPhone 上的 Keynote Remote 应用不能保证百分之百的和电脑连接上，于是准备自己做一个。</p>

<p>因为手头有一个 Arduino，除了平时根据自己喜好做点小东西以外，放着也没什么大用处，所以准备用它来制作这个红外线遥控器。但是制作过程中遇到问题，由于自己买的红色 LED 灯质量不行，发射的信号始终无法被 Macbook 的红外线探测器检查到，于是放弃。</p>

<p>既然遥控器不容易做，那就使用现成的遥控器，用 Arduino 做一个红外线接收器好了。于是就有了这个项目。使用 下图的红外线遥控器（在<a href="http://item.taobao.com/item.htm?spm=a1z10.3.w17-8299872990.33.35xCfn&amp;id=17278512079&amp;">“淘宝”</a>上买的，5 块钱一个）进行控制。Arduino 作为接收器，接收红外线信号，并解码，将解码结果通过 USB 传送给电脑，电脑上的客户端再根据解码结果，模拟电脑按键来实现对 Keynote 的控制。</p>

<p><img src="https://lh3.googleusercontent.com/-FpgQqEiGrEg/UpcIy8HMWSI/AAAAAAAABYU/Zvznasr8fTM/s640/%25E7%2585%25A7%25E7%2589%2587%252013-11-28%2520%25E4%25B8%258B%25E5%258D%25884%252042%252056.jpg" alt="5 块钱一个的红外线遥控器" /></p>

<p>电路图在下面，超级简单，我使用的是 VS1838B 作为红外线传感器（一样是在<a href="http://item.taobao.com/item.htm?spm=a1z10.3.w17-8299872990.9.VOESMp&amp;id=14835734724&amp;">“淘宝”</a>买的，2 块钱一个）。</p>

<p><img src="https://lh6.googleusercontent.com/-yB0nK0QzIyk/UpcpKN_er6I/AAAAAAAABZE/xTzkLpMezio/s640/apple_controller_bb.png" alt="电路图" /></p>

<p>客户端我使用 Processing 编写，Arduino 和 Processing 的程序可以到<a href="https://github.com/pikipity/apple_controller.git">我的 Github </a>下载。下面是遥控器与键盘实际按键的对应关系：</p>

<table>
<thead>
<tr>
<th style="text-align:center;">遥控器按键</th>
<th style="text-align:center;">键盘按键</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;">后推|&lt;&lt;</td>
<td style="text-align:center;">方向键上</td>
</tr>
<tr>
<td style="text-align:center;">前进>>|</td>
<td style="text-align:center;">方向键下</td>
</tr>
<tr>
<td style="text-align:center;">音量 +</td>
<td style="text-align:center;">方向键右</td>
</tr>
<tr>
<td style="text-align:center;">音量 -</td>
<td style="text-align:center;">方向键左</td>
</tr>
<tr>
<td style="text-align:center;">关闭键</td>
<td style="text-align:center;">开启和关闭选择幻灯片</td>
</tr>
<tr>
<td style="text-align:center;">数字键 0~9</td>
<td style="text-align:center;">数字键 0~9</td>
</tr>
</tbody>
</table>


<p>实际焊接电路的时候，使用了两个 VS1838B，保证信号接收的覆盖范围。现在唯一的问题就是，控制距离很近，这毕竟受到那个遥控器的限制，没有办法。</p>

<p><img src="https://lh5.googleusercontent.com/-03mn3hE1oG0/UpcIywneYJI/AAAAAAAABYY/sz1hunZUDr8/s640/%25E7%2585%25A7%25E7%2589%2587%252013-11-28%2520%25E4%25B8%258B%25E5%258D%25884%252042%252015.jpg" alt="实际电路正面" /></p>

<p><img src="https://lh3.googleusercontent.com/-RWONifCIKj0/UpcIz7nYDOI/AAAAAAAABYg/KgFqGnWKyYc/s640/%25E7%2585%25A7%25E7%2589%2587%252013-11-28%2520%25E4%25B8%258B%25E5%258D%25884%252044%252019.jpg" alt="实际电路背面" /></p>

<p><img src="https://lh6.googleusercontent.com/-KPxIQL4uRjg/UpcIy3xTkvI/AAAAAAAABYc/ihL8Wa_p1uo/s640/%25E7%2585%25A7%25E7%2589%2587%252013-11-28%2520%25E4%25B8%258B%25E5%258D%25884%252043%252040.jpg" alt="电路和 Arduino 连接以后" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一起将 Processing 镶嵌在网页上]]></title>
    <link href="http://pikipity.github.io/blog/sketchpad.html"/>
    <updated>2013-11-05T21:42:00+08:00</updated>
    <id>http://pikipity.github.io/blog/sketchpad</id>
    <content type="html"><![CDATA[<p>一直想找一种方法，将 processing 生成的程序放到网页上。在搜索了一番 Google 之后发现要使用 <a href="http://processingjs.org/">processing.js</a> 才可以，但是要设置自己的网页才可以，太麻烦了，于是就放弃了。今天在浏览 <a href="http://processingjs.org/">processing.js</a> 官网说明的时候发现，在<a href="http://processingjs.org/articles/p5QuickStart.html">《Processing.js Quick Start - Processing Developer Edition》</a>一文中介绍了以下两个网站可以在线编写并共享自己的 processing 代码和效果：</p>

<ol>
<li><p><a href="http://sketchpad.cc/">sketchpad</a></p>

<p>这个网站上，不仅可以实现在线编写和分享代码，还可以自由浏览别人的共享代码，所有程序的效果可以实时演示，编辑器中还提供多人合作功能，很方便。</p>

<p>缺点也很显著，编辑器虽然提供语法高亮，但是高不高亮完全没有用，所有文字一个颜色（只有 class 部分和别的不一个颜色）。第二个缺点不晓得是不是我浏览器的问题，贴出来的动画会播放一段时间之后突然放大，导致鼠标定位出现错误，很是奇怪。</p>

<p><img src="https://lh3.googleusercontent.com/-Cx0ZXzkD2ho/UnkDB9mWrDI/AAAAAAAABTc/FiQVDRkoVCs/s912/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-11-05%2520%25E4%25B8%258B%25E5%258D%258810.22.47.png" alt="sketchpad 编辑器界面" /></p>

<p>下面是我为了测试编写的一段小代码：</p>

<p> <iframe id='ifr' width='200' height='235' scrolling='no' style='background: url(http://studio.processingtogether.com/static/img/jun09/pad/connectingbar.gif) no-repeat center 60px;' src='http://studio.processingtogether.com/sp/pad/iframe/ro.9DUd1JyjanBXc/rev.925?autostart=0'></iframe></p></li>
<li><p><a href="http://hascanvas.com/">hascanvas</a></p>

<p>这个网站设计的很独特，编辑器隐藏在左边，鼠标靠近浏览器左边缘的时候，编辑器就会自动弹出，鼠标移开编辑区后，就会保存一次代码并编译，结果就显示在整个页面上。但是我用和上面一模一样的代码进行测试始终报错，这里只好拿别人的代码演示一下了。（貌似鼠标位置依然有偏差）</p>

<p><iframe src="http://hascanvas.com/crossing/embed" frameborder="0" scrolling="no" style="width:600px;height:400px;"></iframe></p>

<p><img src="https://lh6.googleusercontent.com/-gSeb362FAWw/UnkDCOO0AMI/AAAAAAAABTg/7bDgI4cjK80/s912/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-11-05%2520%25E4%25B8%258B%25E5%258D%258810.36.00.png" alt="hascanvas 界面" /></p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Processing 练习作 -- 3D 色子]]></title>
    <link href="http://pikipity.github.io/blog/processing-prectice-3d-dice.html"/>
    <updated>2013-09-12T00:24:00+08:00</updated>
    <id>http://pikipity.github.io/blog/processing-prectice-3d-dice</id>
    <content type="html"><![CDATA[<p>processing 的练习作 &ndash; 3D 色子，旨在练习 processing 的 3D 效果制作。点击鼠标可以抛掷色子。色子的图案没有使用额外的图片，全部使用 processing 直接绘制。源代码在<a href="https://github.com/pikipity/3D_Dice.git">这里</a>。由于不是专注于正方体自由旋转落体的模拟，左移在色子的运动上做的很简单：上升和下落都是一个匀加速直线运动，每次落地撞击损失一半的速度；旋转方面每次根据坐标轴随机选取一个旋转方向，旋转速度和位移成正比；没有考虑触地之后的运动。</p>

<p><img src="https://lh4.googleusercontent.com/-Qzgu5jWc-zY/UjCcf32YpqI/AAAAAAAABI4/myK3RPH83x8/s512/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-09-12%2520%25E4%25B8%258A%25E5%258D%258812.33.52.png" alt="程序截图" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LED 亮度控制 -- Processing 练习作]]></title>
    <link href="http://pikipity.github.io/blog/light-controller.html"/>
    <updated>2013-09-08T20:52:00+08:00</updated>
    <id>http://pikipity.github.io/blog/light-controller</id>
    <content type="html"><![CDATA[<p>又是一个自己制作的 processing 的练习作，旨在练习 processing 与 Arduino 的串口通信。使用 Processing 编写的可视化控制条，用户可以通过拉拽控制条来调整亮度的数值，通过串口将亮度输送给 Arduino，由 Arduino 实现 LED 灯亮度的调整。由于是很简单的控制，所以就没有考虑什么保护电阻之类的了，直接很简单将 LED 插在了开发板上。视频中就可以看出，当亮度 100% 的时候（也就是电压达到 5V 的时候），LED 会过亮，可能会损坏 LED。</p>

<p>可以到<a href="https://github.com/pikipity/Light_Controller.git">这里</a>下载源码。</p>

<p>程序截图：</p>

<p><img src="https://lh6.googleusercontent.com/-IHYJhlfZPoc/UixyaVzcbYI/AAAAAAAABIM/jEakPgrxBqA/s800/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-09-08%2520%25E4%25B8%258B%25E5%258D%25888.03.49.png" alt="程序截图" /></p>

<p>硬件连接：</p>

<p><img src="https://lh6.googleusercontent.com/-agA7VbMa52g/UixyanVbgEI/AAAAAAAABIY/kfIqR_7uBRs/s640/%25E7%2585%25A7%25E7%2589%2587%252013-9-8%2520%25E4%25B8%258B%25E5%258D%25888%252001%252036.jpg" alt="硬件连接" /></p>

<p>控制视频（没有任何处理直接传渣浪，果然画质惨不忍睹）：</p>

<div><object id="ssss" width="480" height="370" ><param name="allowScriptAccess" value="always" /><embed pluginspage="http://www.macromedia.com/go/getflashplayer" src="http://you.video.sina.com.cn/api/sinawebApi/outplayrefer.php/vid=114236415_3342829334_OBrgGio5CWXK+l1lHz2stqlF+6xCpv2xhGm3v1CsJwdaVgiYJMXNb9wG5CvVBstD9HoLHcwydP8i1R4rbKtd/s.swf" type="application/x-shockwave-flash" name="ssss" allowFullScreen="true" allowScriptAccess="always" width="480" height="370"></embed></object></div>

]]></content>
  </entry>
  
</feed>
