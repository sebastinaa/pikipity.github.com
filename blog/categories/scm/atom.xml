<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Categories: Scm | 折腾来折腾去]]></title>
  <link href="http://pikipity.github.io/blog/categories/scm/atom.xml" rel="self"/>
  <link href="http://pikipity.github.io/"/>
  <updated>2016-02-15T21:04:31+08:00</updated>
  <id>http://pikipity.github.io/</id>
  <author>
    <name><![CDATA[pikipity]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[自动家庭电源控制系统半成品放出]]></title>
    <link href="http://pikipity.github.io/blog/auto-home-control.html"/>
    <updated>2014-02-17T20:20:00+08:00</updated>
    <id>http://pikipity.github.io/blog/auto-home-control</id>
    <content type="html"><![CDATA[<p>自动家庭电源控制系统基本完成，各个模块基本实现了预期功能，各个模块直接的衔接工作也基本完成，其实年前就已经赶工完成了，本来想趁着过年在家再继续完善一下，但是又犯懒了，什么也没做。</p>

<p>本来预期为了节省成本，想使用 8051 作为控制核心，结果发现控制什么的太麻烦了，尤其是无线模块部分，而且和电脑跨平台连接也相当的复杂，最后还是选择使用了 Arduino，开发难度瞬间降低。我又将其和 <a href="http://pikipity.github.io/blog/little-mr.html">Little Mr.</a> 结合了一下，使其更加有趣。</p>

<p>更加具体的项目介绍在<a href="http://pikipity.github.io/Home-Control/">这里</a>，整个项目的内容在<a href="https://github.com/pikipity/Home-Control.git">这里下载</a>，这还有三段 demo 是视频：</p>

<ol>
<li><p>电脑控制软件的使用方法（8051 为控制核心）</p>

<p><iframe height="498" width="510" src="http://player.youku.com/embed/XNjY2NzcwMzcy" frameborder="0" allowfullscreen></iframe></p></li>
<li><p>如何使用 little Mr. 进行控制（8051 为控制核心）</p>

<p><iframe height="498" width="510" src="http://player.youku.com/embed/XNjY2NzcwNzIw" frameborder="0" allowfullscreen></iframe></p></li>
<li><p>Little Mr. 与 Arduino 结合（Arduino 为控制核心）</p>

<p><iframe height="498" width="510" src="http://player.youku.com/embed/XNjY2NzcxMjY0" frameborder="0" allowfullscreen></iframe></p></li>
</ol>


<p>这个项目到这里就算是完结了吧，德国 Parce 公司已经有成品放出，正在 indiegogo 上筹资，和我设想的产品从外貌到功能如出一辙，大家可以到<a href="http://www.indiegogo.com/projects/the-parce-idea">这里围观一下</a>，虽然其强调的是省电功能，但是一样具有学习功能，从介绍上看，这种学习功能是使用 Wi-Fi 进行联网之后的一个云端服务。（这种东西果然只靠个人是难以完成的啊。。。╮(╯▽╰)╭）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[打砖块更新]]></title>
    <link href="http://pikipity.github.io/blog/breakout-clone-v2.html"/>
    <updated>2013-12-14T14:51:00+08:00</updated>
    <id>http://pikipity.github.io/blog/breakout-clone-v2</id>
    <content type="html"><![CDATA[<p>第一次发布在<a href="http://pikipity.github.io/blog/breakout-8051.html">这里</a>，此次更新：</p>

<ol>
<li>更改了碰撞后消失砖块的大小。</li>
<li>在两个单片机之间加了两条同步线来使画面和声音更加同步。</li>
<li><p>可以手动调整挡板移动方式，共两种移动方式：</p>

<ul>
<li>按键按下移动，不按不移动 (Not smooth)</li>
<li>按键指定方向，挡板自动移动 (Smooth)</li>
</ul>
</li>
</ol>


<p>更新后的视频演示：</p>

<iframe height="498" width="510" src="http://player.youku.com/embed/XNjQ4MDQ2ODM2" frameborder="0" allowfullscreen></iframe>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[打砖块 (8051)]]></title>
    <link href="http://pikipity.github.io/blog/breakout-8051.html"/>
    <updated>2013-11-17T09:57:00+08:00</updated>
    <id>http://pikipity.github.io/blog/breakout-8051</id>
    <content type="html"><![CDATA[<h3>简介</h3>

<p>用 AT89C52 做的一个打砖块游戏机，使用 Proteus 进行的仿真，部分电路如果要实体化还需改进。</p>

<p>使用 AMPIRE12864 作为显示器，三个按键分别控制平台的“左右移动”和“开始游戏”。为了保证游戏中音乐与画面的流畅，使用另外一块 AT89C52 来控制 sounder 进行声音的播放。</p>

<p>项目主页：<a href="http://pikipity.github.io/Breakout_clone">http://pikipity.github.io/Breakout_clone</a></p>

<h3>游戏规则</h3>

<p>玩家控制屏幕底端的平台左右移动来保证小球在屏幕中碰撞。当小球碰撞到上屏的砖块时，被碰撞的砖块会消失，当所有砖块被消掉后，此关胜利，总共 3 关，3 关全部胜利以后，游戏重置；当小球碰触到屏幕下边缘时，失去一条命，总共 5 条命，当 5 条命全部失去以后，游戏结束，整个游戏重置。</p>

<p>游戏过程中，有四种道具，随机出现在下屏的随机位置。每个道具的图案是一个字母，当小球碰触道具图案时，道具生效。以下是道具介绍：</p>

<ol>
<li><p>变长道具（道具图案是 “L” 字样）：道具生效后，平台变为铺满整个屏幕的底边，一段时间后失效，复原为原来长度。</p>

<p><img src="https://lh5.googleusercontent.com/-ay36V6-TnVw/UoeDXl8zxmI/AAAAAAAABWo/aq7HFFR_784/s31/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-11-16%2520%25E4%25B8%258B%25E5%258D%258810.20.08.png" alt="变长道具" /></p></li>
<li><p>清除道具（道具图案是 “C” 字样）：生效后，随机清除一部分的砖块。</p>

<p><img src="https://lh6.googleusercontent.com/-_PYJavumack/UoeDX7XP9TI/AAAAAAAABWs/Ign1Zn3GPeA/s33/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-11-16%2520%25E4%25B8%258B%25E5%258D%258810.20.24.png" alt="清除道具" /></p></li>
<li><p>胜利道具（道具图案是 “W” 字样）：生效后，此关胜利。</p>

<p><img src="https://lh6.googleusercontent.com/-DG5aOe5ti0s/UoeDYLY2ViI/AAAAAAAABWk/OsG_balBJP8/s35/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-11-16%2520%25E4%25B8%258B%25E5%258D%258810.21.08.png" alt="胜利道具" /></p></li>
<li><p>死亡道具（道具图案是 “D” 字样）：生效后，直接失去一条命。</p>

<p><img src="https://lh3.googleusercontent.com/-btLEA34gYD4/UoeDXMaDysI/AAAAAAAABWU/QtzDuDzqYYM/s29/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-11-16%2520%25E4%25B8%258B%25E5%258D%258810.19.42.png" alt="死亡道具" /></p></li>
</ol>


<p>每一关，上半屏砖块组成的图案都不同（下面是三关的砖块图案），下方平台的移动速度也不同，速度会随着关卡数增大而变快，而且平台的长度也会变短，所以难度也会随之增大。小球的纵向移动速度不变，横向移动速度和平台一致，每次碰撞平台的时候，平台的移动方向和速度就会传递给小球。</p>

<p><img src="https://lh5.googleusercontent.com/-OciVp2e6XnE/UoeDXIK9vcI/AAAAAAAABWM/gzRk9e89D7I/s455/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-11-16%2520%25E4%25B8%258B%25E5%258D%258810.19.20.png" alt="第一关砖块图案" /></p>

<p><img src="https://lh6.googleusercontent.com/-d3jCz1ka0pw/UoeDaTrBJPI/AAAAAAAABXQ/fnqbIvgXodg/s452/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-11-16%2520%25E4%25B8%258B%25E5%258D%258810.24.24.png" alt="第二关砖块图案" /></p>

<p><img src="https://lh6.googleusercontent.com/-BRp240xR57w/UoeDasw4kMI/AAAAAAAABXY/KX8Rw5KPsBQ/s453/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-11-16%2520%25E4%25B8%258B%25E5%258D%258810.26.44.png" alt="第三关砖块图案" /></p>

<h3>文件说明</h3>

<ul>
<li>circuit 文件夹：Proteus 仿真电路</li>
<li>material 文件夹：部分使用到的素材</li>
<li><p>program 文件夹：C 8051 的程序</p>

<ul>
<li>sounder_main.c：控制 sounder 的单片机使用的程序</li>
<li>main.c：主单片机（控制显示器和按键的单片机）的程序</li>
<li><p>lcd12864.h 和 lcd12864.c：为了实现对 AMPIRE12864 的控制编写的函数，包括：</p>

<ol>
<li><code>lcd_write_command ( command )</code>：向 AMPIRE12864 中写入一个命令 command。</li>
<li><code>lcd_write_data ( data )</code>：向 AMPIRE12864 中写入一个8位的数据 data。</li>
<li><code>lcd_read_data ( )</code>：从 AMPIRE12864 中读取一个8位的数据。</li>
<li><code>lcd_init ( )</code>：初始化 AMPIRE12864。</li>
<li><code>first_page ( )</code>：清空整个屏幕。</li>
<li><code>choose_screen ( n )</code>：选择屏幕。（同时选择两个屏幕：n=0；左屏幕：n=1；右屏幕：n=2）</li>
<li><code>set_dot ( x,y )</code>：点亮坐标为 (x,y) 的像素点。（左上角的像素点为 (0,0)，x 坐标向右延伸，y 坐标向下延伸）</li>
<li><code>clear_dot ( x,y )</code>：清除坐标为 (x,y) 的像素点。（坐标系同上）</li>
<li><code>read_dot ( x,y )</code>：读取坐标为 (x,y) 的像素点的状态。</li>
</ol>
</li>
<li>game.h 和 game.c：用于刷新屏幕和计算游戏状态的函数。</li>
</ul>
</li>
</ul>


<h3>电路图</h3>

<p><img src="https://lh6.googleusercontent.com/-ldlHxz4m384/UocrUK_Sy4I/AAAAAAAABV0/RSKXVdsHxJc/s720/circuit.jpg" alt="电路图" /></p>

<h3>运行画面</h3>

<p><img src="https://lh5.googleusercontent.com/-Zfwu4WWGgPA/UoeDXAfFipI/AAAAAAAABWQ/r451XxrQqQs/s543/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-11-16%2520%25E4%25B8%258B%25E5%258D%258810.18.47.png" alt="开始画面" /></p>

<p><img src="https://lh4.googleusercontent.com/-kP_-IcYWnk0/UoeDY4d1ljI/AAAAAAAABXI/VZ0FNyGnSY4/s535/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-11-16%2520%25E4%25B8%258B%25E5%258D%258810.21.47.png" alt="游戏进行中的画面" /></p>

<p><img src="https://lh5.googleusercontent.com/-wRC1xSJ4d4E/UoeDZG8JYvI/AAAAAAAABXA/GJjNwrrN1Fk/s544/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-11-16%2520%25E4%25B8%258B%25E5%258D%258810.22.17.png" alt="死亡后显示剩余生命的画面" /></p>

<p><img src="https://lh6.googleusercontent.com/-NJ48URX34xc/UoeDZUi1y6I/AAAAAAAABW8/C0oJXVNGqoc/s528/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-11-16%2520%25E4%25B8%258B%25E5%258D%258810.22.48.png" alt="5 条命全部耗费完毕之后的画面" /></p>

<p><img src="https://lh4.googleusercontent.com/-IM0DGKy4E1Y/UoeDaDz8iLI/AAAAAAAABXc/XecvfvZClZY/s530/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-11-16%2520%25E4%25B8%258B%25E5%258D%258810.24.09.png" alt="一关获胜之后的画面" /></p>

<h3>Demo 视频</h3>

<p>由于录制的时候忘记开声音了，所以音乐没有录进去。</p>

<iframe height="498" width="700" src="http://player.youku.com/embed/XNjM1Nzk0MTI4" frameborder="0" allowfullscreen></iframe>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[QC12864B 控制库]]></title>
    <link href="http://pikipity.github.io/blog/qc12864b-library.html"/>
    <updated>2013-10-27T16:27:00+08:00</updated>
    <id>http://pikipity.github.io/blog/qc12864b-library</id>
    <content type="html"><![CDATA[<p>为了方便自己使用 8051 对 QC12864B 的控制编写了一个库文件。</p>

<p>QC12864B 自带字库，并且字库中带有中文，使用 ST7920 作为控制器。<a href="http://pan.baidu.com/s/1qrhEF">这里有关于 QC12864B 的说明文档下载</a></p>

<p>此项目可以到<a href="https://github.com/pikipity/QC12864B_8051.git">这里</a>查看和下载源代码。具体的使用信息，可以到 wiki 查询：</p>

<ol>
<li><a href="https://github.com/pikipity/QC12864B_8051/wiki/How-to-use">How to use</a>：包括软件中如何引用和硬件如何连接的说明。</li>
<li><a href="https://github.com/pikipity/QC12864B_8051/wiki/Functions">Function</a>：介绍了几个主要会使用到的函数。</li>
</ol>


<p>这里有一段视频项目中 <code>teasting</code> 文件夹中程序的运行结果：</p>

<p><embed pluginspage='http://www.macromedia.com/go/getflashplayer' src='http://you.video.sina.com.cn/api/sinawebApi/outplayrefer.php/vid=117845240_3342829334_bh28RyE5DTLK+l1lHz2stqlF+6xCpv2xhGm3v1CsJwdaVgiYJMXNb9wG5yHSBc1G8XoLHcwydP8h3xkoaq5Y/s.swf' type='application/x-shockwave-flash' name='sinaplayer' allowFullScreen='true' width='480' height='370'></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[贪吃蛇（8051）]]></title>
    <link href="http://pikipity.github.io/blog/snake-8051.html"/>
    <updated>2013-10-19T22:22:00+08:00</updated>
    <id>http://pikipity.github.io/blog/snake-8051</id>
    <content type="html"><![CDATA[<h3>简介</h3>

<p>使用 AT89C52 制作的贪吃蛇游戏。练习在 8051 上使用实时多任务系统。你可以到<a href="http://pikipity.github.io/snake_8051/">这里下载源码</a>。</p>

<p>一开始的构想是利用 LCD12864 来作为显示屏，于是选择了自己比较熟悉的 ST7920 作为控制器的 LCD12864，毕竟之前也使用同样的显示屏用 Arduino 做过尔罗斯方块，虽然图像显示处理缓慢，但是应该还是可以使用的，测试之后的结果大失所望，由于过于过于缓慢的图像显示导致屏幕闪烁现象过于严重，并且导致任务堵塞，程序堵死，于是放弃。改儿使用 4 块 8*8 LED 矩阵来做显示屏，由于要自己撰写显示函数和游戏函数，程序量徒然增加，还出现了单片机内存不足的现象，经过调试，最终结果还算不错，以下基本功能都已经实现：</p>

<ol>
<li>蛇和食物的显示。</li>
<li>蛇的移动，包括碰撞边界和自身之后的死亡判定和碰撞食物的判定。</li>
<li>蛇在吃掉食物之后的增长效果。</li>
</ol>


<p>由于 8051 单片机本身内存与机能的限制，还有很多预想功能未能实现：</p>

<ol>
<li>食物位置不是随机的，永远固定。</li>
<li>食物数量固定，就是开始游戏之后的那几个食物，不会再增加了，吃完就获胜。</li>
<li>蛇的最大长度是固定的。</li>
<li>蛇的初试长度与位置都不是随机的，永远固定。</li>
</ol>


<h3>文件说明：</h3>

<ol>
<li>lcd12864 文件夹中是使用 lcd12864 制作的初版游戏。仅实现了蛇的移动和边界碰撞判定。闪烁现象严重</li>
<li><p>LCD_array 文件夹中是最终成品。使用 4 个 8*8 的 LED 点阵来作为显示，4个按钮控制上下左右，还有一个 Reset 键用来重启单片机（也就是重启游戏）。此文件夹中包括以下文件</p>

<ul>
<li><p>circuit 文件夹：Proteus 仿真电路图，如下</p>

<p><img src="https://lh5.googleusercontent.com/-lG-RF7FdufE/UmJ34xQ_jUI/AAAAAAAABS8/sQYAz3mA0DA/s720/circuit.jpg" alt="仿真电路图" /></p></li>
<li><p>program 文件夹：烧录入单片机中的程序文档，包括</p>

<ul>
<li>Main.h, Sch51.h, Sch51.c, 2_01_12g.h, 2_01_12g.c: 实时多任务系统所需的文件，由《PATTERNS FOR TIME-TRIGGERED EMBEDDED SYSTEMS》一书提供。</li>
<li>main.c: 主程序。main 函数所在。</li>
<li><p>ledarray.h, ledarray.c: LED 点阵显示函数：</p>

<ul>
<li>LED 点阵初始化函数：<code>led_init()</code></li>
<li>绘制第一块与第二块 LED 点阵的函数：<code>draw1()</code></li>
<li>绘制第三块与第四块 LED 点阵的函数：<code>draw2()</code></li>
<li>清空显示的函数：<code>first_page()</code></li>
<li>向某个坐标写入一个点的函数（左上角为原点，x轴正方向向右延伸，y轴正方向向下延伸，下同）：<code>set_dot()</code></li>
<li>读取某个坐标是否有点存在的函数：<code>read_dot()</code></li>
</ul>
</li>
<li><p>game.h, game.c: 游戏控制及显示函数：</p>

<ul>
<li>根据蛇和食物的控制矩阵，向屏幕内绘制点的函数：<code>draw()</code></li>
<li>控制蛇移动的函数：<code>move()</code></li>
<li>检查按键的函数：<code>button()</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ol>


<h3>最终效果：</h3>

<ol>
<li><p>胜利</p>

<p><div><object id='sinaplayer' width='480' height='370' ><param name='allowScriptAccess' value='always' /><embed pluginspage='http://www.macromedia.com/go/getflashplayer' src='http://you.video.sina.com.cn/api/sinawebApi/outplayrefer.php/vid=117246371_3342829334_bBjjTyc/XmLK+l1lHz2stqlF+6xCpv2xhGm3v1CsJwdaVgiYJMXNb9wG5yvSBsxF8HoLHcwydP8h1Rkra61Z/s.swf' type='application/x-shockwave-flash' name='sinaplayer' allowFullScreen='true' allowScriptAccess='always' width='480' height='370'></embed></object></div></p></li>
<li><p>失败</p>

<p><div><object id='sinaplayer' width='480' height='370' ><param name='allowScriptAccess' value='always' /><embed pluginspage='http://www.macromedia.com/go/getflashplayer' src='http://you.video.sina.com.cn/api/sinawebApi/outplayrefer.php/vid=117246399_3342829334_aBnnR3M5DGXK+l1lHz2stqlF+6xCpv2xhGm3v1CsJwdaVgiYJMXNb9wG5yvSBsxL+HoLHcwydP8h1Rkra6NR/s.swf' type='application/x-shockwave-flash' name='sinaplayer' allowFullScreen='true' allowScriptAccess='always' width='480' height='370'></embed></object></div></p></li>
</ol>

]]></content>
  </entry>
  
</feed>
