<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Categories: Technology | 折腾来折腾去]]></title>
  <link href="http://pikipity.github.io/blog/categories/technology/atom.xml" rel="self"/>
  <link href="http://pikipity.github.io/"/>
  <updated>2016-02-15T21:04:31+08:00</updated>
  <id>http://pikipity.github.io/</id>
  <author>
    <name><![CDATA[pikipity]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Wolfram 语言]]></title>
    <link href="http://pikipity.github.io/blog/wolfram-language.html"/>
    <updated>2014-03-04T22:34:00+08:00</updated>
    <id>http://pikipity.github.io/blog/wolfram-language</id>
    <content type="html"><![CDATA[<p><a href="http://www.wolfram.com/wolfram-language/">Wolfram 语言</a>是由数学软件巨头 <a href="http://www.wolfram.com/">Wolfram Research</a> 开发，可能说这个公司名字你还想不起来它是谁，但是这个公司开发的符号数学软件 <a href="http://www.wolfram.com/mathematica/?fp=middle">Mathmatica</a> 总该听说过吧，毕竟是三大数学软件之一（三大数学软件：Mathmatica，Matlab，Maple），还有他们公司开发的知识型搜索引擎 <a href="https://www.wolframalpha.com/">“Wolfram Alpha”</a> 据说是 Siri 的幕后技术，非常强大。Wolfram 语言可以说是符号运算的集大成者，将一切符号化，使编程语言更加“人性化”。下面是这个语言的一个介绍与 demo，虽然是语言介绍，但是你会发现，每一个命令都相当于一个“小”程序，让我回想起了第一次接触 Mathmatica 时候的“恐惧”，不要以为它仅仅是一个数学软件的编程语言，不要用你所了解的 Matlab 语言去想象它，它是和你之前听说的任何一样编程语言都完全不同的。人类对于世界的理解就是符号化的，如果计算机可以以符号化的思维思考世界，那么。。。或许 Wolfram 语言可以实现这些。现在，已经实现了<a href="http://www.wolfram.com/raspberry-pi/?fp=middle">将 Wolfram 语言搭载在树莓 Pi 上</a>。（我猜测应该是需要联网的，这么强大的语言其库文件必然非常庞大，使用起来内存占用等也是问题，家用电脑运行真的大丈夫？但是我还是很期待啊！但是价格肯定和 Mathmatica、Wolfram Alpha 一样不菲吧。。。）</p>

<p><embed height="452" width="544" quality="high" allowfullscreen="true" type="application/x-shockwave-flash" src="http://static.hdslb.com/miniloader.swf" flashvars="aid=988838&page=1" pluginspage="http://www.adobe.com/shockwave/download/download.cgi?P1_Prod_Version=ShockwaveFlash"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[奇奇怪怪的机器人]]></title>
    <link href="http://pikipity.github.io/blog/robot-youtube1.html"/>
    <updated>2014-01-19T16:02:00+08:00</updated>
    <id>http://pikipity.github.io/blog/robot-youtube1</id>
    <content type="html"><![CDATA[<p>在 Youtube 上看到几个机器人的视频，觉得这几个机器人挺特别，就搬运到了优酷上。视频放在这里，有兴趣的可以点开看一看。（顺便一提，今天改进了一下前几天写的<a href="http://pikipity.github.io/">“兰顿蚂蚁”的程序</a>，可以在支持色彩的终端上用色块代替字符，也就这样了，兰顿蚂蚁画出来的东西真是乱起八糟啊。。。o(╯□╰)o）</p>

<!--more-->


<h3>蜘蛛机器人</h3>

<iframe height="498" width="510" src="http://player.youku.com/embed/XNjYyMjg1MzQ0" frameborder="0" allowfullscreen></iframe>


<h3>自组装蛇形机器人</h3>

<iframe height="498" width="510" src="http://player.youku.com/embed/XNjYyMjg3NjY4" frameborder="0" allowfullscreen></iframe>


<h3>气球机器人（超漂亮）</h3>

<iframe height="498" width="510" src="http://player.youku.com/embed/XNjYyMjg2NzA4" frameborder="0" allowfullscreen></iframe>


<h3>MorpHex 机器人</h3>

<iframe height="498" width="510" src="http://player.youku.com/embed/XNjYyMjg2MDU2" frameborder="0" allowfullscreen></iframe>


<h3>蜻蜓机器人</h3>

<iframe height="498" width="510" src="http://player.youku.com/embed/XNjYyMjg1NjAw" frameborder="0" allowfullscreen></iframe>


<h3>Carleton University 机器人课</h3>

<p>人家机器人课玩乐高！！我们还在苦逼的用 Matlab 仿真。%>_&lt;%</p>

<iframe height="498" width="510" src="http://player.youku.com/embed/XNjYyMjg4MDky" frameborder="0" allowfullscreen></iframe>


<h3>Pololu 3pi 机器人</h3>

<p>这个机器人超好玩，小巧又可以自己 DIY，土豪们可以考虑入手啊。<a href="http://www.pololu.com/product/975">官网销售</a></p>

<iframe height="498" width="510" src="http://player.youku.com/embed/XNjYyMjg3MDY0" frameborder="0" allowfullscreen></iframe>


<h3>Parrot MiniDrone and Parrot Jumping Sumo</h3>

<p>这两个机器人最近很火（官网新闻 <a href="http://blog.parrot.com/2014/01/07/parrot-minidrone/">Parrot MiniDrone</a> 和 <a href="http://blog.parrot.com/2014/01/07/parrot-jumping-sumo/">Parrot Jumping Sumo</a>），但一样是土豪的玩具。%>_&lt;%</p>

<iframe height="498" width="510" src="http://player.youku.com/embed/XNjU3OTcyMjA0" frameborder="0" allowfullscreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lytro Camera -- 光场相机]]></title>
    <link href="http://pikipity.github.io/blog/light-field-camera.html"/>
    <updated>2014-01-04T08:35:00+08:00</updated>
    <id>http://pikipity.github.io/blog/light-field-camera</id>
    <content type="html"><![CDATA[<p><img src="https://lh3.googleusercontent.com/-v_sSVgUCrLk/UsdaMN5vqPI/AAAAAAAABbM/AZxnmd6vAtE/s576/Lytro.jpg" alt="Lytro Camera" /></p>

<p><a href="http://en.wikipedia.org/wiki/Light-field_camera">光场相机</a>自从1908年第一次提出之后，就一直是雷声大雨点小。2011年 Lytro 公司发布了<a href="https://www.lytro.com/camera/#software-3d">上图这款消费级的光场相机</a>，受到各方面的关注之后就慢慢淡出人们的视野了。</p>

<p>这里有一段视频，来简单介绍一下光场相机：</p>

<iframe height="498" width="510" src="http://player.youku.com/embed/XNjU3MDY4ODA0" frameborder="0" allowfullscreen></iframe>


<p>另外一个视频简单介绍了光场相机拍摄出来的相片的优点：</p>

<iframe height="498" width="510" src="http://player.youku.com/embed/XNjU3MTM2Mjg0" frameborder="0" allowfullscreen></iframe>


<p>这款产品做的相当不错，包括了相关的处理软件，并可以和社交网站连接直接上传照片，官方也有一个<a href="https://pictures.lytro.com/">让用户展示照片的平台</a>。虽然价格貌似贵了一些，但是和那些高级单反相机相比，还是没有什么的吧。下面是一个 Lytro 相机拍摄的照片分享（鼠标点击图片就可以重新对焦，鼠标拖动可以改变视角）</p>

<iframe width="400" height="415" src="http://pictures.lytro.com/lytroweb/pictures/431172/embed" frameborder="0" allowfullscreen scrolling="no"></iframe>


<p>我认为之所以光场相机现在叫好不叫座，主要还是由于人们的使用习惯难以改变。大多人已经习惯了先对焦再拍照的习惯，这种先拍照后对焦的方式无疑是要改变大多数人的认知的。或许在未来，每个人手上的相机，甚至是手机上的相机，都是光场相机。但是现在，要让大众迅速接受这样一种从外观到使用都超乎想象的“东西”，还是非常困难的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tutorialspoint -- Simple Easy Learning]]></title>
    <link href="http://pikipity.github.io/blog/tutorialspoint.html"/>
    <updated>2013-08-23T11:24:00+08:00</updated>
    <id>http://pikipity.github.io/blog/tutorialspoint</id>
    <content type="html"><![CDATA[<p><img src="https://lh3.googleusercontent.com/-EOXgioZB97c/UhbZ3vnuTXI/AAAAAAAABG0/cMP-tK0Gn4A/s599/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-08-23%2520%25E4%25B8%258A%25E5%258D%258811.41.01.png" alt="tutorialspoint -- Simple Easy Learning" /></p>

<p>在网上搜索 JavaScript 教程的时候无意间发现了这个网站 &ndash; <a href="http://www.tutorialspoint.com/">tutorialpoint（简称 TP）</a>，整体感觉很像是 <a href="http://www.w3schools.com/">W3School</a>，都是一篇一篇短小精悍并且很实用的教程组成，但是内容更为丰富，不仅包括各式各样的编程语言（例如 Ruby、Python，甚至连 Assembly 都有）还包括一些网络及电脑知识（例如什么是 RSS，什么是云计算等等），编程语言的教程中还带有在线仿真编程器，你可以在其网页上就实践教程中的例子，不用为了安装一个编译器或是为了找一个好用的 IDE 伤破脑筋，先学习，觉得这门语言挺好，可以用，再找编译器或是 IDE 也不迟。</p>

<p>快速浏览了一下其中 Python，Ruby 和 Assembly 的教程，感觉教程很基础很实用，非常适合新手学习，上手快，见效快，基本看完一遍教程，大约就明白这门语言的结构并能变出简单的程序了。总而言之，是个学习电脑、网络、编程知识的好地方。</p>

<p><a href="http://www.tutorialspoint.com/">tutorialpoint（简称 TP）网站传送点</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[尝试两种利用 EMD 来计算瞬时频率的方法]]></title>
    <link href="http://pikipity.github.io/blog/try-two-way-to-find-instaneous-frequency-by-using-emd.html"/>
    <updated>2013-08-19T19:00:00+08:00</updated>
    <id>http://pikipity.github.io/blog/try-two-way-to-find-instaneous-frequency-by-using-emd</id>
    <content type="html"><![CDATA[<p>这两天利用 Matlab 尝试了两种利用 EMD 来计算瞬时频率的方法。EMD 的介绍请看<a href="http://pikipity.github.io/blog/find-a-way-to-calculate-the-instaneous-frequency.html">这里</a>。我利用的是 G. Rilling 的程序计算的 IMF，程序在<a href="http://perso.ens-lyon.fr/patrick.flandrin/emd.html">这里</a>下载。尽管这个程序存在着<a href="http://pikipity.github.io/blog/find-a-way-to-calculate-the-instaneous-frequency.html">这样</a>或<a href="http://pikipity.github.io/blog/find-a-way-to-calculate-the-instaneous-frequency-2.html">那样</a>的问题，但是他利用自己的假设找到了方法来解决，我曾经尝试着利用我在<a href="http://pikipity.github.io/blog/find-a-way-to-calculate-the-instaneous-frequency-2.html">这篇文章</a>中提到的看法来解决那些问题，但是发现，速度大大降低，结果改善却不明显，所以放弃而在这里使用他的程序。</p>

<p>这两种方法中，一种方法先使用 Hilbert Transform 求得 IMF 的瞬时相位，然后利用瞬时相位求得瞬时频率，另一种则不适用 Hilbert Transform，直接根据 IMF 类似弦波这一特性，利用局部极值点与零点来计算瞬时频率。</p>

<!--more-->


<h3>方法一：瞬时相位求瞬时频率</h3>

<p>关于 Hilber Transform，我在<a href="http://pikipity.github.io/blog/find-a-way-to-calculate-the-instaneous-frequency.html">这篇文章</a>中已经介绍过了，它可以将信号变换为其对应的虚数形式：</p>

<p>$$z(t)=s(t)+j\hat{s}(t)$$</p>

<p>其中 $$s(t)$$ 是待分析的 IMF 分量，$$\hat{s}(t)$$ 是 Hilbert Transform 的结果，利用 Matlab 函数 <code>z=hilbert(s)</code> 可以直接得到 $$z(t)$$（注意，得到的是 $$z(t)$$，不是 $$\hat{s}(t)$$）。由虚数形式我们就可以很轻松地得到瞬时相位 $$\theta(t)$$ 了。然后利用下式就可以求得瞬时频率了。</p>

<p>$$2\pi f(t)=\omega(t)=\frac{d\theta(t)}{dt}$$</p>

<p>但是要注意的是，我们只能求得取样点的相位，也就是说，我们求得的相位是离散的，无法求导，这里我使用减法来求近似导数，例如我们要求第 $$n$$ 个点的瞬时频率，那么就利用下式求得</p>

<p>$$2\pi f(n)=\frac{\theta(n+1)-\theta(n-1)}{2\frac{1}{f_s}}$$</p>

<p>这里的 $$f_s$$ 是采样频率。对于数据的第一个点，就将 $$n-1$$ 改为 $$n$$，下面除以一个 $$\frac{1}{f_s}$$；对于数据的最后一个点，就将 $$n+1$$ 换为 $$n$$，下面除以一个 $$\frac{1}{f_s}$$。Matlab 函数如下，可以在<a href="https://gist.github.com/pikipity/6268454">这里</a>下载。</p>

<pre><code>function [ XPhase,f,Imag,t,f_OGZ,maxf_emdvalue ]=IF_hilbert(x,fs)
%x is the signal that will be analysised
%fs is sample frequency
%XPhase is instanepus phase
%f is instaneous phase
%t is the time string
%f_OGZ is the mean frequency
%maxf_emdvalue is the frequency whose property is maximum.

if length(x)&lt;2
    error('The length of x is too short')
end
Ts=1/fs;
x=hilbert(x);
XPhase=phase(x);
for n=1:length(x)
     t(n)=n*Ts;
    Imag(n)=abs(x(n));
    if n==1
        f(n)=1/2/pi*(XPhase(2)-XPhase(1))/Ts;
    elseif n==length(x)
        f(n)=1/2/pi*(XPhase(n)-XPhase(n-1))/Ts;
    else
        f(n)=1/2/pi*(XPhase(n+1)-XPhase(n-1))/2/Ts;
    end
end
f_OGZ=sum(f)/length(f);
f_range=0:1:100;
f_pro=hist(f,f_range);
maxf_emd_pro=max(f_pro);
maxf_emd_pro_index=find(f_pro==maxf_emd_pro);
maxf_emdvalue=f_range(maxf_emd_pro_index);
end
</code></pre>

<p>为了方便以后的对比，我又求了瞬时频率的平均频率<code>f_OGZ</code>和瞬时频率出现概率最高的频率值<code>maxf_emdvalue</code></p>

<h3>方法二：利用极值点与零点来估算瞬时频率</h3>

<p>根据 IMF 的特性，IMF都可以看做多个弦波的叠加，那么对于弦波，一个极值点与零点之间的时间就可以看做四分之一个波长，我们可以根据这个来估算频率，具体推导和理论请看<a href="https://docs.google.com/file/d/0B8AjE9xqZzSiSk1LaFk2akVCT2M/edit?usp=sharing">这篇论文</a>。重点就是利用下面这个公式</p>

<p>$$f=\frac{1}{12}\left{\frac{1}{T_4}+\left(\frac{1}{T_2<sup>1</sup>}+\frac{1}{T_2<sup>2</sup>}\right)+\left(\frac{1}{T_1<sup>1</sup>}+\frac{1}{T_1<sup>2</sup>}+\frac{1}{T_1<sup>3</sup>}+\frac{1}{T_1<sup>4</sup>}\right)\right}$$</p>

<p>或者</p>

<p>$$f=\frac{1}{7}\left{\frac{1}{4T_4}+\left(\frac{1}{2T_2<sup>1</sup>}+\frac{1}{2T_2<sup>2</sup>}\right)+\left(\frac{1}{T_1<sup>1</sup>}+\frac{1}{T_1<sup>2</sup>}+\frac{1}{T_1<sup>3</sup>}+\frac{1}{T_1<sup>4</sup>}\right)\right}$$</p>

<p>符号代表的意思见下图</p>

<p><img src="https://lh3.googleusercontent.com/-y6Y5rCuC4gY/UhIOqdpzm3I/AAAAAAAABD8/62GvEmRK1a8/s512/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-08-19%2520%25E4%25B8%258B%25E5%258D%25888.24.33.png" alt="上式符号代表的意思" /></p>

<p>很容易发现，这个式子中很注重局部极值点与零点的位置，所以继续使用 G. Rilling 的近似会带来很大的误差，所以，我重新求取了极值点与零点。对于零点，如果利用 G. Rilling 求取的零点位置上信号值不是零，那么在其附近找到一个点，两者的信号值乘积为负数，那么零点必然就在两者中间，作直线，求直线与横坐标的交点作为零点。对于极值点，我在 G. Rilling 的函数找到的极值点的附近再取六个点，利用这七个点的坐标求取一个二次方程 $$y=ax<sup>2</sup>+bx+c$$ 的系数，这个二次方程的极值点作为信号的极值点。Matlab 函数如下，下载在<a href="https://gist.github.com/pikipity/6268692">这里</a>。其中求新的极值点与零点的函数<code>[ newindmin newindmax newindzer ] = refresh_index( x,indmin,indmax,indzer )</code>在<a href="https://gist.github.com/pikipity/6268738">这里</a>。我同样求了一下瞬时频率的平均频率 <code>f_GZC</code>。</p>

<pre><code>function [f,t,f_GZC]=Instaneous_Frequency_Test(x,fs)
% [f,t]=Instaneous_Frequency_Test(x,fs)[f,t]=Instaneous_Frequency_Test(x,fs)
% x is the signal that will be analysised.
% fs is the sampling frequency
% f is the instaneous frquency
% t is the time range of each instaneous frequency
% f_GZC is the mean frequency

%the length of x must be larger than 8
if length(x)&lt;8
    error('the length of x must be larger than 7')
end
%clear results
f=[]; 
t=[];
%calculate sampling periode
Ts=1/fs;
%calculate local extrema and zero
[indmin indmax indzer]=extr(x);
%refresh local extrema and zero
[ newindmin newindmax newindzer ] = refresh_index( x,indmin,indmax,indzer );
indzer=newindzer;
indmin=newindmin;
indmax=newindmax;
%get the index of all indmin, indmax and indzer
%[index,I] = rerange_index( indmin,indmax,indzer );
index=sort([indmin indmax indzer]);
if length(index)&lt;5
    error('Too few extrema and zero')
end
%prepare Begin point index and finish point index
L_index=length(index);
%begin calculate instaneous frquency
Begin_point=4;
Finish_point=L_index-4;
for Number_index=1:L_index-1
    if Number_index==1
        t=[t;index(Number_index) index(Number_index+1)];
        t_q=(index(Number_index+1)-index(Number_index))*Ts;
        t_h_2=(index(Number_index+2)-index(Number_index))*Ts;
        t_f_4=(index(Number_index+4)-index(Number_index))*Ts;
        f=[f 1/3*(1/t_q/4+1/t_h_2/2+1/t_f_4)];
    elseif Number_index==2
        t=[t;index(Number_index) index(Number_index+1)];
        t_q=(index(Number_index+1)-index(Number_index))*Ts;
        t_h_1=(index(Number_index+1)-index(Number_index-1))*Ts;
        t_h_2=(index(Number_index+2)-index(Number_index))*Ts;
        t_f_3=(index(Number_index+3)-index(Number_index-1))*Ts;
        t_f_4=(index(Number_index+4)-index(Number_index))*Ts;
        f=[f 1/5*(1/t_q/4+1/t_h_1/2+1/t_h_2/2+1/t_f_3+1/t_f_4)];
    elseif Number_index==3
        t=[t;index(Number_index) index(Number_index+1)];
        t_q=(index(Number_index+1)-index(Number_index))*Ts;
        t_h_1=(index(Number_index+1)-index(Number_index-1))*Ts;
        t_h_2=(index(Number_index+2)-index(Number_index))*Ts;
        t_f_2=(index(Number_index+2)-index(Number_index-2))*Ts;
        t_f_3=(index(Number_index+3)-index(Number_index-1))*Ts;
        t_f_4=(index(Number_index+4)-index(Number_index))*Ts;
        f=[f 1/6*(1/t_q/4+1/t_h_1/2+1/t_h_2/2+1/t_f_2+1/t_f_3+1/t_f_4)];
    elseif Number_index==L_index-1
        t=[t;index(Number_index) index(Number_index+1)];
        t_q=(index(Number_index+1)-index(Number_index))*Ts;
        t_h_1=(index(Number_index+1)-index(Number_index-1))*Ts;
        t_f_1=(index(Number_index+1)-index(Number_index-3))*Ts;
        f=[f 1/3*(1/t_q/4+1/t_h_1/2+1/t_f_1)];
    elseif Number_index==L_index-2
        t=[t;index(Number_index) index(Number_index+1)];
        t_q=(index(Number_index+1)-index(Number_index))*Ts;
        t_h_1=(index(Number_index+1)-index(Number_index-1))*Ts;
        t_h_2=(index(Number_index+2)-index(Number_index))*Ts;
        t_f_1=(index(Number_index+1)-index(Number_index-3))*Ts;
        t_f_2=(index(Number_index+2)-index(Number_index-2))*Ts;
        f=[f 1/5*(1/t_q/4+1/t_h_1/2+1/t_h_2/2+1/t_f_1+1/t_f_2)];
    elseif Number_index==L_index-3
        t=[t;index(Number_index) index(Number_index+1)];
        t_q=(index(Number_index+1)-index(Number_index))*Ts;
        t_h_1=(index(Number_index+1)-index(Number_index-1))*Ts;
        t_h_2=(index(Number_index+2)-index(Number_index))*Ts;
        t_f_1=(index(Number_index+1)-index(Number_index-3))*Ts;
        t_f_2=(index(Number_index+2)-index(Number_index-2))*Ts;
        t_f_3=(index(Number_index+3)-index(Number_index-1))*Ts;
        f=[f 1/6*(1/t_q/4+1/t_h_1/2+1/t_h_2/2+1/t_f_1+1/t_f_2+1/t_f_3)];
    else
        t=[t;index(Number_index) index(Number_index+1)];
        t_q=(index(Number_index+1)-index(Number_index))*Ts;
        t_h_1=(index(Number_index+1)-index(Number_index-1))*Ts;
        t_h_2=(index(Number_index+2)-index(Number_index))*Ts;
        t_f_1=(index(Number_index+1)-index(Number_index-3))*Ts;
        t_f_2=(index(Number_index+2)-index(Number_index-2))*Ts;
        t_f_3=(index(Number_index+3)-index(Number_index-1))*Ts;
        t_f_4=(index(Number_index+4)-index(Number_index))*Ts;
        f=[f 1/7*(1/t_q/4+1/t_h_1/2+1/t_h_2/2+1/t_f_1+1/t_f_2+1/t_f_3+1/t_f_4)];
    end
end
t=t.*1/fs;
f_GZC=sum(f)/length(f);
end
</code></pre>

<h3>两种方法连同 fft 的比较</h3>

<p>下面来比较一下这两种方法，因为 现在使用最多的还是直接用 fft 来计算频率值，所以这里连同 fft 一起进行比较比较。分析的数据，我是用的是实验室曾经记录的 SSVEP 的信号，数据可以在<a href="http://pan.baidu.com/share/link?shareid=3490016825&amp;uk=4080321956">这里</a>下载，将信号保存到变量<code>x</code>中运行下面这段程序（直接加载入 Matlab 就已经保存在变量<code>x</code>中了），程序在<a href="https://gist.github.com/pikipity/6268877">这里</a>下载</p>

<pre><code>% signal -&gt; x
%begin
fs=600;
Ts=1/fs;
t=1:length(x);
t=(t-1).*Ts;
%figure('name','original signal');plot(t,x)
%IMF=eemd_test(x); %try to use eemd to calculate IOF
IMF=emd(x);
% original signal
figure('name','original signal')
plot(t,x)
xlabel('t (s)')
ylabel('Amplitude')
%IMF components
figure('name','IMF')
for n=1:size(IMF,1)
    subplot(size(IMF,1),1,n)
    plot(t,IMF(n,:))
    xlabel('t (s)')
    ylabel('Amplitude')
    %hold on
    %plot(t,IMF(n,:),'rx')
end
%fft for each IMF components
figure('name','fft')
maxf_fft=[];
for n=2:size(IMF,1)-1
    subplot(size(IMF,1)-2,1,n-1)
    [frequency,fft_result]=fft_plot(IMF(n,:),fs);
    plot(frequency,abs(fft_result(1:length(frequency))))
    xlabel('f (Hz)')
    ylabel('Amplitude')
    axis([0 100 0 max(abs(fft_result(1:length(frequency))))])
    maxf_fft_index=find(abs(fft_result(1:length(frequency)))==max(abs(fft_result(1:length(frequency)))));
    maxf_fftvalue=frequency(maxf_fft_index);
    maxf_fft(n-1)=maxf_fftvalue(1);
end
%IF not using hilbert transform
%IF property
figure('name','IF')
xlabel('frequency')
ylabel('probility (%)')
meanf=[];
maxf_emd=[];
for n=2:size(IMF,1)-1
    subplot(size(IMF,1)-2,1,n-1)
    [f,tf,f_GZC]=Instaneous_Frequency_Test(IMF(n,:),600);
    meanf(n-1)=f_GZC;
    f_range=0:1:100;%frequency range
    f_pro=hist(f,f_range);
    plot(f_range,f_pro./length(f)*100);
    xlabel('frequency')
    ylabel(strcat('IMF',num2str(n),'(%)'))
    maxf_emd_pro=max(f_pro);
    maxf_emd_pro_index=find(f_pro==maxf_emd_pro);
    maxf_emdvalue=f_range(maxf_emd_pro_index);
    maxf_emd(n-1)=maxf_emdvalue(1);
end
%IF in time domain
figure('name','IF value')
for h=2:size(IMF,1)-1
    subplot(size(IMF,1)-2,1,h-1)
    xlabel('t (s)')
    ylabel('f (Hz)')
    [f,tf,f_GZC]=Instaneous_Frequency_Test(IMF(h,:),600);
    hold on
    for n=1:length(f)
        plot([tf(n,1),tf(n,2)],[f(n),f(n)],'k')
        if n~=length(f)
            plot([tf(n,2),tf(n,2)],[f(n+1),f(n)],'k')
        end
    end
end
%IF using hilbert transform
%IF property
figure('name','IF property hilbert')
for n=2:size(IMF,1)-1
    subplot(size(IMF,1)-2,1,n-1)
    xlabel('f (Hz)')
    ylabel('Number')
     [ XPhase,f,Imag,t,f_OGZ,maxf_emdvalue ]=IF_hilbert(IMF(n,:),fs);
     maxf_emd2(n-1)=maxf_emdvalue;
     f_range=0:1:100;%frequency range
    f_pro=hist(f,f_range);
    plot(f_range,f_pro./length(f)*100);
    xlabel('frequency')
    ylabel(strcat('IMF',num2str(n),'(%)'))
end
%IF in time domain
figure('name','IF value hilbert')
for h=2:size(IMF,1)-1
    subplot(size(IMF,1)-2,1,h-1)
    xlabel('t (s)')
    ylabel('f (Hz)')
    [ XPhase,f,Imag,t,f_OGZ,maxf_emdvalue ]=IF_hilbert(IMF(h,:),fs);
    plot(t,f);
end
disp(strcat('frequency in fft from IMF2 to IMF',num2str(size(IMF,1)-1),':'))
disp(maxf_fft)
disp(strcat('frequency in emd not uing heilbert from IMF2 to    IMF',num2str(size(IMF,1)-1),':'))
disp(maxf_emd)
disp(strcat('frequency in emd using hilbert from IMF2 to    IMF',num2str(size(IMF,1)-1),':'))
disp(maxf_emd2)
</code></pre>

<p>运行之后会生成多幅图片，对于 15Hz 的信号会得到如下的图片：</p>

<p><img src="https://lh4.googleusercontent.com/-0xZGCMWdvnI/UjLU2NV1mII/AAAAAAAABKk/1UGjM6MJRLU/s720/15-1.jpg" alt="15Hz 原始信号" /></p>

<p><img src="https://lh5.googleusercontent.com/-TwMBSrhpz8M/UjLU2oioM6I/AAAAAAAABKM/gONw6OfgAXA/s800/15-2.jpg" alt="15Hz 各 IMF 分量时域图" /></p>

<p><img src="https://lh6.googleusercontent.com/-GQjdCWO10PE/UjLU24GARmI/AAAAAAAABKQ/ltPy7CnekzY/s800/15-3.jpg" alt="15Hz 各 IMF fft 分析得到的频域图" /></p>

<p><img src="https://lh6.googleusercontent.com/-t2EUbNuPxLU/UjLU3LfTOnI/AAAAAAAABKY/bLHARTXDYOw/s800/15-4.jpg" alt="15Hz 各 IMF 利用方法二得到的各瞬时频率在频域上的分布" /></p>

<p><img src="https://lh4.googleusercontent.com/-6MV4J5HrAJ8/UjLU3mHvOaI/AAAAAAAABKw/w4kLQhfxcxA/s720/15-5.jpg" alt="15Hz 各 IMF 利用方法二得到的个瞬时频率时域分布" /></p>

<p><img src="https://lh5.googleusercontent.com/-xVpy3GU7ZiA/UjLU3gzA3LI/AAAAAAAABKg/vvoYW_h4cbA/s800/15-6.jpg" alt="15Hz 各 IMF 利用方法一得到的各瞬时频率在频域上的分布" /></p>

<p><img src="https://lh5.googleusercontent.com/--CtgNydXY3o/UhIZcbAxgiI/AAAAAAAABFg/4Ymz3vJTATk/s671/6.jpg" alt="15Hz 各 IMF 利用方法一得到的个瞬时频率时域分布" /></p>

<p>对于 10Hz 的信号会得到如下的图片：</p>

<p><img src="https://lh5.googleusercontent.com/-oRJXvkHsb0I/UjLU0L2GLKI/AAAAAAAABJY/xRUbYdyfacA/s800/10-1.jpg" alt="10Hz 原始信号" /></p>

<p><img src="https://lh5.googleusercontent.com/-KM8dafNVOX4/UjLU0YKtv8I/AAAAAAAABJc/D_vIyUT4Bao/s720/10-2.jpg" alt="10Hz 各 IMF 分量时域图" /></p>

<p><img src="https://lh6.googleusercontent.com/--FjsjtAdygg/UjLU0K2zjcI/AAAAAAAABJQ/KlNVWsKeRFk/s800/10-3.jpg" alt="10Hz 各 IMF fft 分析得到的频域图" /></p>

<p><img src="https://lh6.googleusercontent.com/-N06vYTktp2I/UjLU04xcZXI/AAAAAAAABJg/WNO1VMYZnpo/s720/10-4.jpg" alt="10Hz 各 IMF 利用方法二得到的各瞬时频率在频域上的分布" /></p>

<p><img src="https://lh3.googleusercontent.com/-PS9f7lRs24Q/UjLU1AtAIYI/AAAAAAAABJ8/Ceu9qIzU3vE/s720/10-5.jpg" alt="10Hz 各 IMF 利用方法二得到的个瞬时频率时域分布" /></p>

<p><img src="https://lh4.googleusercontent.com/-oF2ANnl2h1w/UjLU1UAksFI/AAAAAAAABJs/Jd5kqOl4gMM/s640/10-6.jpg" alt="10Hz 各 IMF 利用方法一得到的各瞬时频率在频域上的分布" /></p>

<p><img src="https://lh6.googleusercontent.com/-jQR7RJxZhwE/UhIZcNFP4_I/AAAAAAAABFU/xX1crLsefx8/s559/6-2.jpg" alt="10Hz 各 IMF 利用方法一得到的个瞬时频率时域分布" /></p>

<p>在对于数据特征提取的时候，对于 fft，我们直接找频域图（就是第二幅图）上的最大值所对应的频率就是信号的频率，而对于方法一和方法二，我们对于所有瞬时频率进行统计（就是第三和第五幅图，我这里是从1到100，以1为单位进行统计，也就是统计瞬时频率为0.5~1.5的点数，然后统计瞬时频率为1.5~2.5的点数，以此类推），范围内点数最多的频率就是此信号的频率。所以每个频率下的六幅图中，我们重点关注第二、第三和第五幅图，会发现上面两种方法的结果的区别并不明显，并且显然 fft 的结果比上面两种方法的结果还明显。再看一下程序输出的结果，对于15Hz，fft显示频率为14.9414Hz，方法一的结果为13Hz，方法二的结果为13Hz。对于10Hz，fft显示的频率为9.9606Hz，方法一为10Hz，方法二为10Hz。很显然，方法一二在15Hz的时候变得极为不准确。再看图，会发现15Hz的时候方法一得到的瞬时频率时域图（第六幅图）竟然出现了负频，但是 IMF 应该是不存在负频的，而且边缘出现突变，说明算法并不完美，还需要解决这两个问题，而且应该尝试更多的数据并缩短时间（现在我使用的是全部的6秒钟数据）来看看结果如何。</p>

<p>最后总结一下，尽管尝试了两种方法，但是和论文上看到的结果相去甚远，下一步需要：</p>

<ol>
<li><p>解决两个已发现问题：</p>

<ul>
<li>15Hz的时候方法一得到的瞬时频率时域图出现负频的问题</li>
<li>瞬时频率时域图边缘突变</li>
</ul>
</li>
<li>缩短时间看结果</li>
</ol>

]]></content>
  </entry>
  
</feed>
